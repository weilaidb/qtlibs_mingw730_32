\1->installEventFilter(this);


bool eventFilter(QObject *target, QEvent *event);
void InstallEventFilterSets(void);


void MainWindow::InstallEventFilterSets(void)
{

}

bool MainWindow::eventFilter_\1(QObject *target, QEvent *event)
{
//    qDebug("eventFilter_\1");

    if (target == ui->textEdit)
    {
        //双击出现listView界面
        if (event->type() == QEvent::MouseButtonDblClick) {
            return true;
        }
        //单击隐藏listView界面
        if (event->type() == QEvent::MouseButtonPress) {
            return true;
        }
        //按键处理
        if(event->type() == QEvent::KeyPress)
        {
            QKeyEvent *keyEvent = static_cast<QKeyEvent *>(event);
            Qt::KeyboardModifiers modifiers = keyEvent->modifiers();
            int key = keyEvent->key();

            // 应该写成
            if(modifiers == Qt::ControlModifier || modifiers & Qt::ControlModifier)
            {
                // 再判断按键
                // 这里需要判断小键盘的情况
                if(key == Qt::Key_J)  // 这里有两种触发形式直接按end键、或者shift+小键盘1--小键盘也可能不响应
                {
                    qDebug()<<"Ctrl+J";
                }
            }
        }
    }
    return QObject::eventFilter(target, event);
}


bool autoCCode::eventFilter(QObject *target, QEvent *event)
{
    qDebug() << "eventFilter";

    eventFilter_\1(target, event);
    return Qtargetect::eventFilter(target, event);
}