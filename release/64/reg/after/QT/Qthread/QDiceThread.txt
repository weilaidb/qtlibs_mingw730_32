//=======================头文件$NL//=======================头文件$NL//=======================头文件$NL#include   <Qthread>$NLclass \1 : public Qthread$NL{$NL   Q_OBJECT$NLprivate:$NL   int    m_seq=0;          //掷骰子次数序号$NL   int    m_diceValue;      //骰子点数$NL   bool   m_Paused=true;    //暂停$NL   bool   m_stop=false;     //停止$NLprotected:$NL   void   run() Q_DECL_OVERRIDE;  //线程任务$NLpublic:$NL   \1();$NL   void   diceBegin();      //掷一次骰子$NL   void   dicePause();      //暂停$NL   void   stopThread();     //结束线程$NLsignals:$NL   void   newValue(int seq,int diceValue); //产生新点数的信号$NL};$NL$NL$NL//=======================源文件$NL//=======================源文件$NL//=======================源文件$NLinclude   " $LO(\1).h"$NL#include   <QTime>$NL\1::\1()$NL{//构造函数$NL}$NLvoid \1::diceBegin()$NL{ //开始掷骰子$NL   m_Paused=false;$NL}$NL$NLvoid \1::dicePause()$NL{//暂停掷骰子$NL   m_Paused=true;$NL}$NL$NLvoid \1::stopThread()$NL{//停止线程$NL   m_stop=true;$NL}$NL$NLvoid \1::run()$NL{//线程任务$NL   m_stop=false;//启动线程时令m_stop=false$NL   m_seq=0; //掷骰子次数$NL   qsrand(QTime::currentTime().msec());//随机数初始化，qsrand是线程安全的$NL   while(!m_stop)//循环主体$NL   {$NL      if (!m_Paused)$NL      {$NL         m_diceValue=qrand(); //获取随机数$NL         m_diceValue=(m_diceValue % 6)+1;$NL         m_seq++;$NL         emit newValue(m_seq,m_diceValue);  //发射信号$NL      }$NL      msleep(500); //线程休眠500ms$NL   }$NL   quit();//相当于exit(0),退出线程的事件循环$NL}$NL$NL$NL$NL//=======================头文件$NL$NL#ifndef DIALOG_H$NL#define DIALOG_H$NL$NL#include <QDialog>$NL$NL#include    "$LO(\1).h"$NL$NLnamespace Ui {$NLclass Dialog;$NL}$NL$NLclass Dialog : public QDialog$NL{$NL    Q_OBJECT$NL$NLprivate:$NL    \1   threadA;$NL$NLprotected:$NL    void    closeEvent(QCloseEvent *event);$NL$NLpublic:$NL    explicit Dialog(QWidget *parent = 0);$NL    ~Dialog();$NL$NLprivate slots:$NL    void    onthreadA_started();$NL    void    onthreadA_finished();$NL    void    onthreadA_newValue(int seq, int diceValue);$NL$NL    void on_btnClear_clicked();$NL$NL    void on_btnDiceEnd_clicked();$NL$NL    void on_btnDiceBegin_clicked();$NL$NL    void on_btnStopThread_clicked();$NL$NL    void on_btnStartThread_clicked();$NL$NLprivate:$NL    Ui::Dialog *ui;$NL};$NL$NL#endif // DIALOG_H$NL$NL$NL$NL//=======================源文件$NL#include "dialog.h"$NL#include "ui_dialog.h"$NL$NLvoid Dialog::closeEvent(QCloseEvent *event)$NL{ //窗口关闭事件，必须结束线程$NL    if (threadA.isRunning())$NL    {$NL        threadA.stopThread();$NL        threadA.wait();$NL    }$NL    event->accept();$NL}$NL$NLDialog::Dialog(QWidget *parent) : QDialog(parent),  ui(new Ui::Dialog)$NL{//构造函数$NL    ui->setupUi(this);$NL    connect(&threadA,SIGNAL(started()),this,SLOT(onthreadA_started()));$NL    connect(&threadA,SIGNAL(finished()),this,SLOT(onthreadA_finished()));$NL$NL    connect(&threadA,SIGNAL(newValue(int,int)),this,SLOT(onthreadA_newValue(int,int)));$NL}$NL$NLDialog::~Dialog()$NL{$NL    delete ui;$NL}$NL$NLvoid Dialog::onthreadA_started()$NL{//线程的started()信号的响应槽函数$NL    ui->LabA->setText("Thread状态：thread started");$NL}$NL$NLvoid Dialog::onthreadA_finished()$NL{//线程的 finished()信号的响应槽函数$NL    ui->LabA->setText("Thread状态：thread finished");$NL}$NL$NLvoid Dialog::onthreadA_newValue(int seq,int diceValue)$NL{//\1的newValue()信号的响应槽函数，显示骰子次数和点数$NL    QString  str=QString::asprintf("第 %d 次掷骰子，点数为：%d",seq,diceValue);$NL    ui->plainTextEdit->appendPlainText(str);$NL$NL    QPixmap pic; //图片显示$NL    QString filename=QString::asprintf(":/dice/images/d%d.jpg",diceValue);$NL    pic.load(filename);$NL    ui->LabPic->setPixmap(pic);$NL}$NL$NLvoid Dialog::on_btnClear_clicked()$NL{ //清空文本 按钮$NL    ui->plainTextEdit->clear();$NL}$NL$NLvoid Dialog::on_btnDiceEnd_clicked()$NL{//暂停 掷骰子按钮$NL    threadA.dicePause();$NL    ui->btnDiceBegin->setEnabled(true);$NL    ui->btnDiceEnd->setEnabled(false);$NL}$NL$NLvoid Dialog::on_btnDiceBegin_clicked()$NL{//开始 掷骰子按钮$NL    threadA.diceBegin();$NL    ui->btnDiceBegin->setEnabled(false);$NL    ui->btnDiceEnd->setEnabled(true);$NL}$NL$NLvoid Dialog::on_btnStopThread_clicked()$NL{//结束线程 按钮$NL    threadA.stopThread();//结束线程的run()函数执行$NL    threadA.wait();//$NL$NL    ui->btnStartThread->setEnabled(true);$NL    ui->btnStopThread->setEnabled(false);$NL$NL    ui->btnDiceBegin->setEnabled(false);$NL    ui->btnDiceEnd->setEnabled(false);$NL}$NL$NLvoid Dialog::on_btnStartThread_clicked()$NL{//启动线程 按钮$NL    threadA.start();$NL$NL    ui->btnStartThread->setEnabled(false);$NL    ui->btnStopThread->setEnabled(true);$NL$NL    ui->btnDiceBegin->setEnabled(true);$NL    ui->btnDiceEnd->setEnabled(false);$NL}$NL