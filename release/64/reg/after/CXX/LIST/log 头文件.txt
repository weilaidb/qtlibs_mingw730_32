/***************************************************************************$NL** 版权所有:   Copyright (c) 2020-2030$NL** 文件名称:  $LO<<<\3>>>.h$NL** 当前版本:  v1.0$NL** 作$TB者:$NL** 完成日期: $DATEX$NL** 修改记录:$NL** 修改日期:$NL** 版本号  :$NL** 修改人  :$NL** 修改内容:$NL***************************************************************************/$NL#ifndef $UP<<<\3>>>_H$NL#define $UP<<<\3>>>_H$NL$NL/*****************************头文件****************************************/$NL#include <iostream>$NL#include <list>$NL$NLusing namespace std;$NL/*****************************宏定义****************************************/$NL$NL/*****************************结构体或类型定义*******************************/$NL$NL/*****************************全局变量****************************************/$NL$NL/*****************************本地变量****************************************/$NL$NL/*****************************函数或类声明****************************************/$NL$NL/*****************************函数或类实现****************************************/$NL$NL/*****************************by extern "C"****************************************/$NL$NL#ifdef __cplusplus$NLextern "C" {$NL#endif$NL$NL/*****************************头文件****************************************/$NL$NL/*****************************宏定义****************************************/$NL//存储最大条目和删除步进数量$NL#define LISTSIZEMAX (\1)$NL#define LISTERASESTEP (LISTSIZEMAX/\2)$NL$NL/*****************************结构体或类型定义*******************************/$NL$NL/*****************************全局变量****************************************/$NL$NL/*****************************本地变量****************************************/$NL$NL/*****************************函数或类声明****************************************/$NL$NL/*****************************函数或类实现****************************************/$NL$NLinline void erase_list_first_n(list<string> &inlist, int n)$NL{$NL$TBint i = 0;$NL$TBlist<string>::iterator v = inlist.begin();$NL$TBwhile( v != inlist.end() && i < n) {$NL$TB$TBlist<string>::iterator tmp = v++;$NL$TB$TBinlist.erase(tmp);$NL$TB$TBi++;$NL$TB}$NL}$NL$NLinline void insert_list(list<string> &inlist, string input)$NL{$NL$TBif(inlist.size() > LISTSIZEMAX)$NL$TB{$NL$TB$TBerase_list_first_n(inlist, LISTERASESTEP);$NL$TB$TB// cout << "erase item" << endl;$NL$TB}$NL$TBinlist.push_back(input);$NL}$NL$NLinline void clear_list(list<string> &inlist)$NL{$NL$TBinlist.clear();$NL}$NL$NLinline void show_list(const char *pTip, list<string> &inlist)$NL{$NL$TB// 使用迭代器 iterator 访问值$NL$TBint i = 0;$NL$TBcout << pTip << " size = " << inlist.size() << endl;$NL$TBlist<string>::iterator v = inlist.begin();$NL$TBwhile( v != inlist.end()) {$NL$TB$TBcout << "value of " << pTip << " [" << setw( 3 )  << ++i  << "] = " << *v << endl;$NL$TB$TBv++;$NL$TB}$NL}$NL//反向输出打印$NLinline void show_list_r(const char *pTip, list<string> &inlist)$NL{$NL$TB// 使用迭代器 iterator 访问值$NL$TBint i = 0;$NL$TBcout << pTip << "(reverse) size = " << inlist.size() << endl;$NL$TBlist<string>::reverse_iterator v = inlist.rbegin();$NL$TBwhile( v != inlist.rend()) {$NL$TB$TBcout << "value of " << pTip << " [" << setw( 3 )  << ++i  << "] = " << *v << endl;$NL$TB$TBv++;$NL$TB}$NL$TBcout << pTip << "(reverse) size = " << inlist.size() << endl;$NL}$NL$NL$NL#ifdef __cplusplus$NL}$NL#endif$NL$NL#endif /* $UP<<<\3>>>_H */