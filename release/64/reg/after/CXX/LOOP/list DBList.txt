typedef vector<\2 *> \2List;$NL$NL$NL///////////////////////////////////////////////////////////////////////////////$NL$NLclass \1$NL{$NL    public:$NL        ~\1();$NL        void add(\2 *newdbnode);$NL        void clear();$NL        \2List *getList();$NL        Bool erase(const unsigned int fid);$NL        \2 *find(const unsigned int fid);$NL        int getsize();$NL        \2 *findIndex(const int tindex);$NL        void show();$NL    protected:$NL        \2List $LO(\1);$NL$NL};$NL$NL$NL$NL///////////////////////////////////////////////////////////////////////////////$NL$NL$NL$NLvoid \1::add(\2 *newdbnode) {$LO(\1).push_back(newdbnode);}$NL$NLint \1::getsize() {return $LO(\1).size();}$NL$NLvoid \1::clear() $NL{$NL    if ($LO(\1).empty()) $NL        return;$NL    \2List::iterator theIterator;$NL    for (theIterator = $LO(\1).begin(); theIterator != $LO(\1).end(); theIterator++){$NL        \2 *curobject = (\2 *)(*theIterator);$NL        delete curobject;$NL    }$NL    $LO(\1).clear();$NL}$NL$NLBool \1::erase(const unsigned int fid)$NL{$NL    \2List::iterator theIterator;$NL    for (theIterator = $LO(\1).begin(); theIterator != $LO(\1).end(); theIterator++){$NL        \2 *curobject = (\2 *)(*theIterator);$NL        if (curobject->GetID() == fid){$NL            delete curobject;$NL            $LO(\1).erase(theIterator);$NL            return True;$NL        }$NL    }$NL    return False;$NL}$NL$NL$NL\2 *\1::findIndex(const int tindex)$NL{$NL    int i = 0;$NL    \2List::iterator theIterator;$NL    for (theIterator = $LO(\1).begin(); theIterator != $LO(\1).end(); theIterator++){$NL        if (i++ == tindex){$NL            \2 *curobject = (\2 *)(*theIterator);$NL            return curobject;$NL        }$NL    }$NL    return NULL;$NL}$NL$NL\2 *\1::find(const unsigned int fid)$NL{$NL    \2List::iterator theIterator;$NL    for (theIterator = $LO(\1).begin(); theIterator != $LO(\1).end(); theIterator++){$NL        \2 *curobject = (\2 *)(*theIterator);$NL        if (curobject->GetID() == fid)$NL            return curobject;$NL    }        $NL    return NULL;$NL}$NL$NL$NL\1::~\1() {clear();}$NL$NL\2List *\1::getList() {return &$LO(\1);}$NL