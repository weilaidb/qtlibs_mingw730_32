#ifndef $UP(\6)_H$NL#define $UP(\6)_H$NL$NL#include <iostream>$NL#include <map>$NL#include <string>$NLusing namespace std;$NL$NLclass \6;$NLtypedef \1<\2 , \3> \4;$NLtypedef \1<\2 , \3>::iterator \4_ITER;$NLtypedef \1<\2 , \3>::reverse_iterator \4_RITER;$NL$NL$NLclass \6$NL{$NLpublic:$NL    string name;$NL    int age;$NL$NL    \6(string n, int a)$NL    {$NL        name = n;$NL        age = a;$NL    }$NL$NL    bool operator<(const \6 &p) const //注意这里的两个const$NL    {$NL        return (age < p.age) || (age == p.age && name.length() < p.name.length()) ;$NL    }$NL$NL$NLpublic:$NL    static void printMap();$NL    static void printRMap();$NL    static void insertMap(\2  iKey,  \3 Val);$NL    static bool findMap(\2  iKey);$NL    static void clearMap();$NL    static bool eraseMap(\2  iKey);$NL$NLprivate:$NL    static \4 \5;$NL};$NL$NL$NL#endif // $UP(\6)_H$NL$NL$NL$NL#include "$LO(\6).h"$NL$NL\4 \6::\5;$NL$NL$NLvoid \6::printMap()$NL{$NL    \4_ITER it;$NL    \4_ITER itEnd;$NL    it = \5.begin();$NL    itEnd = \5.end();$NL$NL    cout << "map size:" << \5.size() << endl;$NL    while (it != itEnd) {$NL//        cout<<it->first.name  <<' '<<it->second<<endl;$NL        it++;$NL    }$NL}$NL$NLvoid \6::printRMap()$NL{$NL    \4_RITER riter;$NL    cout << "map size:" << \5.size() << endl;$NL    for(riter = \5.rbegin(); riter != \5.rend(); riter++)$NL    {$NL//        cout<<riter->first<<"  "<<riter->second<<endl;$NL    }$NL}$NL$NLvoid \6::insertMap(\2  iKey,  \3 Val)$NL{$NL$NL    \4_ITER f_it;$NL$NL    f_it = \5.find(iKey);$NL    if(f_it == \5.end())$NL    {$NL        \5.insert(pair<\2  ,  \3>(iKey,Val));$NL    }$NL    else$NL    {$NL        f_it->second = Val;$NL    }$NL}$NL$NLbool \6::findMap(\2  iKey)$NL{$NL    bool bFlag = false;$NL    \4_ITER f_it;$NL$NL    f_it = \5.find(iKey);$NL    if(f_it == \5.end())$NL    {$NL//        cout<<"not find key:" << iKey <<endl;$NL    }$NL    else$NL    {$NL//        cout<<"find key:" << iKey <<endl;$NL        bFlag = true;$NL    }$NL$NL    return bFlag;$NL}$NL$NL$NLvoid \6::clearMap()$NL{$NL    \5.clear();$NL}$NL$NLbool \6::eraseMap(\2  iKey)$NL{$NL    \4_ITER f_it;;$NL    f_it = \5.find(iKey);$NL    if(f_it == \5.end())$NL    {$NL        return false;$NL    }$NL    \5.erase(f_it);$NL$NL    return true;$NL}$NL$NL$NL