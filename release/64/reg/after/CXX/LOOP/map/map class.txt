=========================================================$NL=========================================================$NL=========================================================$NL#ifndef $UP(\6)_H$NL#define $UP(\6)_H$NL$NL#include <map>$NL#include <iostream>$NLusing namespace std;$NLtypedef \1<\2 , \3> \4;$NLtypedef \1<\2 , \3>::iterator \4_ITER;$NLtypedef \1<\2 , \3>::reverse_iterator \4_RITER;$NL$NLclass \6$NL{$NLpublic:$NL    \6();$NL    static void printMap();$NL    static void printRMap();$NL    static void insertMap(\2 iKey, \3 Val);$NL    static void findMap(\2 iKey);$NL    static void clearMap();$NL    static bool eraseMap(\2 iKey);$NL$NLprivate:$NL    static \4 \5;$NL};$NL$NL#endif // $UP(\6)_H$NL$NL$NL#include "$LO(\6).h"$NL$NL\4 \6::\5;$NL$NL\6::\6()$NL{$NL$NL}$NL$NLvoid \6::printMap()$NL{$NL    \4_ITER it;$NL    \4_ITER itEnd;$NL    it = \5.begin();$NL    itEnd = \5.end();$NL$NL    cout << "map size:" << \5.size() << endl;$NL    while (it != itEnd) {$NL        cout<<it->first<<' '<<it->second<<endl;$NL        it++;$NL    }$NL}$NL$NLvoid \6::printRMap()$NL{$NL    \4_RITER riter;$NL    cout << "map size:" << \5.size() << endl;$NL    for(riter = \5.rbegin(); riter != \5.rend(); riter++)$NL    {$NL        cout<<riter->first<<"  "<<riter->second<<endl;$NL    }$NL}$NL$NLvoid \6::insertMap(\2 iKey, \3 Val)$NL{$NL    \5.insert(pair<\2 , \3>(iKey,Val));$NL}$NL$NLvoid \6::findMap(\2 iKey)$NL{$NL    \4_ITER f_it;$NL$NL    f_it = \5.find(iKey);$NL    if(f_it == \5.end())$NL    {$NL        cout<<"not find key:" << iKey <<endl;$NL    }$NL    else$NL    {$NL        cout<<"find key:" << iKey <<endl;$NL    }$NL}$NL$NLvoid \6::clearMap()$NL{$NL    \5.clear();$NL}$NL$NLbool \6::eraseMap(\2 iKey)$NL{$NL    \4_ITER f_it;;$NL    f_it = \5.find(iKey);$NL    if(f_it == \5.end())$NL    {$NL        return false;$NL    }$NL    \5.erase(f_it);$NL$NL    return true;$NL}$NL$NL$NL$NL