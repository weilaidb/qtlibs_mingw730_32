=========================================================$NL=========================================================$NL=========================================================$NL#ifndef $UP<<<\6>>>_H$NL#define $UP<<<\6>>>_H$NL$NL#include <map>$NL#include <iostream>$NLusing namespace std;$NL$NL$NLtypedef struct \2$NL{$NL$TBint  x;$NL$TBfriend bool operator<( const struct \2 a, const struct \2 b )$NL$TB{$NL$TB$TBreturn a.x < b.x;$NL$TB}$NL} \2, *P_Key;$NL$NLtypedef struct \3$NL{$NL$TBint val;$NL$TBfriend bool operator<( const struct \3 a, const struct \3 b )$NL$TB{$NL$TB$TBreturn a.val < b.val;$NL$TB}$NL} \3, *P_Val;$NL$NL$NLtypedef \1<\2 , \3> \4;$NLtypedef \1<\2 , \3>::iterator \4_ITER;$NLtypedef \1<\2 , \3>::reverse_iterator \4_RITER;$NL$NL$NLclass \6$NL{$NLpublic:$NL$TB\6();$NL$TBstatic void printMap();$NL$TBstatic void printRMap();$NL$TBstatic void insertMap(\2 tKey, \3 tVal);$NL$TBstatic bool findMap(\2 tKey);$NL$TBstatic void clearMap();$NL$TBstatic int size();$NL$TBstatic bool eraseMap(\2 tKey);$NL$NLprivate:$NL$TBstatic \4 \5;$NL};$NL$NL#endif // $UP<<<\6>>>_H$NL$NL$NL#include "$LO<<<\6>>>.h"$NL$NL\4 \6::\5;$NL$NL\6::\6()$NL{$NL$NL}$NL$NLvoid \6::printMap()$NL{$NL$TB\4_ITER it;$NL$TB\4_ITER itEnd;$NL$TBit = \5.begin();$NL$TBitEnd = \5.end();$NL$NL$TBcout << "map size:" << \5.size() << endl;$NL$TBwhile (it != itEnd) {$NL$TB$TB//cout<<it->first<<' '<<it->second<<endl;$NL$TB$TBit++;$NL$TB}$NL}$NL$NLvoid \6::printRMap()$NL{$NL$TB\4_RITER riter;$NL$TBcout << "map size:" << \5.size() << endl;$NL$TBfor(riter = \5.rbegin(); riter != \5.rend(); riter++)$NL$TB{$NL$TB$TB//cout<<riter->first<<"  "<<riter->second<<endl;$NL$TB}$NL}$NL$NLvoid \6::insertMap(\2 tKey, \3 tVal)$NL{$NL$NL$TB\4_ITER f_it;$NL$NL$TBf_it = \5.find(tKey);$NL$TBif(f_it == \5.end())$NL$TB{$NL$TB$TB\5.insert(pair<\2 , \3>(tKey,tVal));$NL$TB}$NL$TBelse$NL$TB{$NL$TB$TB\5[tKey] = tVal;$NL$TB}$NL}$NL$NLbool \6::findMap(\2 tKey)$NL{$NL$TBbool bFlag = false;$NL$TB\4_ITER f_it;$NL$NL$TBf_it = \5.find(tKey);$NL$TBif(f_it == \5.end())$NL$TB{$NL$TB$TB//cout<<"not find key:" << tKey <<endl;$NL$TB}$NL$TBelse$NL$TB{$NL$TB$TB//cout<<"find key:" << tKey <<endl;$NL$TB$TBbFlag = true;$NL$TB}$NL$NL$TBreturn bFlag;$NL}$NL$NL$NLvoid \6::clearMap()$NL{$NL$TB\5.clear();$NL}$NL$NLint CMapStruct::size()$NL{$NL$TBreturn \5.size();$NL}$NL$NLbool \6::eraseMap(\2 tKey)$NL{$NL$TB\4_ITER f_it;;$NL$TBf_it = \5.find(tKey);$NL$TBif(f_it == \5.end())$NL$TB{$NL$TB$TBreturn false;$NL$TB}$NL$TB\5.erase(f_it);$NL$NL$TBreturn true;$NL}