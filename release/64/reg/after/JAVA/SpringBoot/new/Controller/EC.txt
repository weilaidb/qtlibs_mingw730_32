//================ model \1$NL$NL$NLimport lombok.Data;$NL$NL/**$NL * @author $NL * @version 1.0$NL * @date $DATETIME$NL * @description$NL * @modify$NL */$NL@Data$NLpublic class \1 {$NL$TBprivate int id;$NL$TBprivate String title;$NL$TBprivate String desc;$NL$TBprivate String author;$NL$TBprivate String type;$NL$TBprivate String status;$NL$TBprivate int updatecnt;$NL$TBprivate int delflag;$NL$TBprivate int querycnt;$NL$TBprivate String remark1;$NL$TBprivate String remark2;$NL$TBprivate String remark3;$NL$TBprivate String remark4;$NL$TBprivate int REVINT1;$NL$TBprivate int REVINT2;$NL$TBprivate int REVINT3;$NL$TBprivate int REVINT4;$NL}$NL$NL$NL$NL//================Dao \1$NL$NLimport com.alibaba.fastjson.JSONObject;$NLimport com.weilaidb.dd.model.\1;$NLimport org.apache.ibatis.annotations.*;$NL$NLimport java.util.List;$NL$NL@Mapper$NLpublic interface \1Dao {$NL$TB@Select("SELECT * FROM $LO<<<\1>>>")$NL$TBList<\1> get\1List();$NL$NL//$TB@Create("CREATE TABLE $LO<<<\1>>>( [id] INTEGER PRIMARY KEY, [name] varchar(255), [type] varchar(255), [price] varchar(255), [size] varchar(255), [status] varchar(255), [description] varchar(255)  );")$NL//$TBint create\1();$NL$NL$TB@Insert("INSERT INTO $LO<<<\1>>>([title],[desc],[author],[type],[status],[remark1],[remark2])VALUES(#{title},#{desc},#{author},#{type},#{status},#{remark1},#{remark2})")$NL$TBint add\1(JSONObject request);$NL$NL$TB@Update("UPDATE $LO<<<\1>>> SET title=#{title},desc=#{desc},author=#{author},type=#{type},status=#{status} ,remark1=#{remark1},remark2=#{remark2}, updatetime=(datetime('now','localtime')) WHERE id=#{id}")$NL$TBvoid update\1(JSONObject request);$NL$NL$TB@Delete("DELETE FROM $LO<<<\1>>> WHERE id=#{id}")$NL$TBvoid delete\1(@Param("id") int id);$NL$NL$TBList<\1> search\1(JSONObject request);$NL}$NL$NL$NL$NL$NL$NL$NL//================Service \1$NL$NLimport com.alibaba.fastjson.JSONObject;$NLimport org.springframework.stereotype.Service;$NL$NL$NL@Service$NLpublic interface \1Service {$NL$TBJSONObject get\1List(int pageNum, int pageSize);$NL$NL$TBJSONObject create\1();$NL$NL$TBJSONObject add\1(JSONObject request);$NL$NL$TBJSONObject update\1(JSONObject request);$NL$NL$TBJSONObject delete\1(int id);$NL$NL$TBJSONObject search\1(JSONObject request);$NL}$NL$NL$NL$NL$NL$NL$NL$NL//================Controller \1$NLimport com.alibaba.fastjson.JSONObject;$NLimport com.weilaidb.dd.service.\1Service;$NLimport org.springframework.beans.factory.annotation.Autowired;$NLimport org.springframework.web.bind.annotation.*;$NL$NL/**$NL * @author guozhengMu$NL * @version 1.0$NL * @date 2019/8/26 16:51$NL * @description$NL * @modify$NL */$NL@RestController$NL@RequestMapping(value = "/ec")$NLpublic class \1Controller {$NL$TB@Autowired$NL$TBprivate \1Service $LO<<<\1>>>Service;$NL$NL$TB@RequestMapping(value = "/\1List", method = RequestMethod.GET)$NL$TBpublic JSONObject get\1List(@RequestParam("pageNum") int pageNum, @RequestParam("pageSize") int pageSize) {$NL$TB$TBreturn $LO<<<\1>>>Service.get\1List(pageNum, pageSize);$NL$TB}$NL$NL$TB@RequestMapping(value = "/update\1", method = RequestMethod.POST)$NL$TBpublic JSONObject updateEc(@RequestBody JSONObject request) {$NL$TB$TBreturn $LO<<<\1>>>Service.update\1(request);$NL$TB}$NL$NL$TB@RequestMapping(value = "/create\1", method = RequestMethod.POST)$NL$TBpublic JSONObject create\1(@RequestBody JSONObject request) {$NL$TB$TBreturn $LO<<<\1>>>Service.create\1();}$NL$NL$TB@RequestMapping(value = "/add\1", method = RequestMethod.POST)$NL$TBpublic JSONObject add\1(@RequestBody JSONObject request) {$NL$TB$TBreturn $LO<<<\1>>>Service.add\1(request);$NL$TB}$NL$NL$TB@RequestMapping(value = "/delete\1", method = RequestMethod.GET)$NL$TBpublic JSONObject delete\1(@RequestParam("id") int id) {$NL$TB$TBreturn $LO<<<\1>>>Service.delete\1(id);$NL$TB}$NL$NL$TB@RequestMapping(value = "search\1",method = RequestMethod.POST)$NL$TBpublic JSONObject search\1(@RequestBody JSONObject request){$NL$TB$TBreturn $LO<<<\1>>>Service.search\1(request);$NL$TB}$NL}$NL$NL$NL//================Service Implement \1$NL$NLimport com.alibaba.fastjson.JSONObject;$NLimport com.github.pagehelper.PageHelper;$NLimport com.github.pagehelper.PageInfo;$NLimport com.weilaidb.dd.dao.\1Dao;$NLimport com.weilaidb.dd.model.\1;$NLimport com.weilaidb.dd.service.\1Service;$NLimport org.springframework.beans.factory.annotation.Autowired;$NLimport org.springframework.stereotype.Service;$NL$NL/**$NL * @author guozhengMu$NL * @version 1.0$NL * @date 2019/8/26 16:55$NL * @description$NL * @modify$NL */$NL@Service(value = "\1Service")$NLpublic class \1ServiceImpl implements \1Service {$NL$TB@Autowired$NL$TBprivate \1Dao $LO<<<\1>>>Dao;$NL$NL$TB@Override$NL$TBpublic JSONObject get\1List(int pageNum, int pageSize) {$NL$TB$TBJSONObject result = new JSONObject();$NL$TB$TBtry {$NL$TB$TB$TBPageHelper.startPage(pageNum, pageSize);$NL$TB$TB$TBPageInfo<\1> pageInfo = new PageInfo($LO<<<\1>>>Dao.get\1List());$NL$NL$TB$TB$TBresult.put("code", "0");$NL$TB$TB$TBresult.put("msg", "操作成功！");$NL$TB$TB$TBresult.put("data", pageInfo.getList());$NL$TB$TB$TBresult.put("count", pageInfo.getTotal());$NL$TB$TB} catch (Exception e) {$NL$TB$TB$TBresult.put("code", "500");$NL$TB$TB$TBresult.put("msg", "查询异常！");$NL$TB$TB}$NL$TB$TBreturn result;$NL$TB}$NL$NL$TB@Override$NL$TBpublic JSONObject create\1() {$NL$TB$TBreturn null;$NL$TB}$NL$NL$TB@Override$NL$TBpublic JSONObject add\1(JSONObject request) {$NL$TB$TBJSONObject result = new JSONObject();$NL$TB$TBtry {$NL$TB$TB$TB$LO<<<\1>>>Dao.add\1(request);$NL$TB$TB$TBresult.put("code", "0");$NL$TB$TB$TBresult.put("msg", "操作成功！");$NL$TB$TB} catch (Exception e) {$NL$TB$TB$TBresult.put("code", "500");$NL$TB$TB$TBresult.put("msg", "新增商品异常！" + e.getMessage());$NL$TB$TB}$NL$TB$TBreturn result;$NL$TB}$NL$NL$TB@Override$NL$TBpublic JSONObject update\1(JSONObject request) {$NL$TB$TBJSONObject result = new JSONObject();$NL$TB$TBtry {$NL$TB$TB$TB$LO<<<\1>>>Dao.update\1(request);$NL$TB$TB$TBresult.put("code", "0");$NL$TB$TB$TBresult.put("msg", "操作成功！");$NL$TB$TB} catch (Exception e) {$NL$TB$TB$TBresult.put("code", "500");$NL$TB$TB$TBresult.put("msg", "修改商品异常！");$NL$TB$TB$TBSystem.out.println(e.getMessage());$NL$TB$TB}$NL$TB$TBreturn result;$NL$TB}$NL$NL$TB@Override$NL$TBpublic JSONObject delete\1(int id) {$NL$TB$TBJSONObject result = new JSONObject();$NL$TB$TBtry {$NL$TB$TB$TB$LO<<<\1>>>Dao.delete\1(id);$NL$TB$TB$TBresult.put("code", "0");$NL$TB$TB$TBresult.put("msg", "操作成功！");$NL$TB$TB} catch (Exception e) {$NL$TB$TB$TBresult.put("code", "500");$NL$TB$TB$TBresult.put("msg", "删除商品异常！");$NL$TB$TB}$NL$TB$TBreturn result;$NL$TB}$NL$NL$TB@Override$NL$TBpublic JSONObject search\1(JSONObject request) {$NL$TB$TBJSONObject result = new JSONObject();$NL$TB$TBtry {$NL$TB$TB$TBint pageNum = request.getInteger("pageNum");$NL$TB$TB$TBint pageSize = request.getInteger("pageSize");$NL$TB$TB$TBPageHelper.startPage(pageNum, pageSize);$NL$TB$TB$TBPageInfo<\1> pageInfo = new PageInfo($LO<<<\1>>>Dao.search\1(request));$NL$NL$TB$TB$TBresult.put("code", "0");$NL$TB$TB$TBresult.put("msg", "操作成功！");$NL$TB$TB$TBresult.put("data", pageInfo.getList());$NL$TB$TB$TBresult.put("count", pageInfo.getTotal());$NL$TB$TB} catch (Exception e) {$NL$TB$TB$TBresult.put("code", "500");$NL//$TB$TB$TBresult.put("msg", "查询商品异常！");$NL$TB$TB$TBresult.put("msg", "查询商品异常！" + e.getMessage());$NL$TB$TB}$NL$TB$TBreturn result;$NL$TB}$NL}$NL$NL$NL//================ \1Mapper.xml$NL$NL<?xml version="1.0" encoding="UTF-8" ?>$NL<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"$NL$TB$TB"http://mybatis.org/dtd/mybatis-3-mapper.dtd">$NL<mapper namespace="com.weilaidb.dd.dao.\1Dao">$NL$TB<select id="search\1" resultType="com.weilaidb.dd.model.\1">$NL$TB$TBSELECT$NL$TB$TBid,$NL$TB$TBtitle,$NL$TB$TBcasedetail,$NL$TB$TBauthor,$NL$TB$TBoperresult,$NL$TB$TBstatus,$NL$TB$TBstep$NL$TB$TBFROM$NL$TB$TB$LO<<<\1>>>$NL$TB$TB<where>$NL$TB$TB$TB1=1$NL$TB$TB$TB<!--$TB[#此处从网页传递过来的名称是name]-->$NL$TB$TB$TB<if test="id != '' "> and id like '%'|| #{name} ||'%' </if>$NL$TB$TB$TB<if test="title != '' "> or title like '%'|| #{name} ||'%'</if>$NL$TB$TB$TB<if test="desc != '' "> or desc like '%'|| #{name} ||'%'</if>$NL$TB$TB$TB<if test="author != '' "> or author like '%'|| #{name} ||'%'</if>$NL$TB$TB$TB<if test="remark1 != '' "> or remark1 like '%'|| #{name} ||'%'</if>$NL$TB$TB</where>$NL$TB</select>$NL</mapper>$NL$NL$NL$NL$NL==================================================================$NL==================================================================$NL==================================================================