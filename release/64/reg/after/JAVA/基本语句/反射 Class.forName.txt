public static void test1() throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException, NoSuchFieldException {$NL$NL$TB// 1.通过字符串获取Class对象，这个字符串必须带上完整路径名$NL$TBClass \1 = Class.forName("\2");$NL$TB// 2.获取声明的构造方法，传入所需参数的类名，如果有多个参数，用','连接即可$NL$TBConstructor studentConstructor = \1.getDeclaredConstructor(String.class);$NL$TB// 如果是私有的构造方法，需要调用下面这一行代码使其可使用，公有的构造方法则不需要下面这一行代码$NL$TBstudentConstructor.setAccessible(true);$NL$TB// 使用构造方法的newInstance方法创建对象，传入构造方法所需参数，如果有多个参数，用','连接即可$NL$TBObject student = studentConstructor.newInstance("NameA");$NL$TB// 3.获取声明的字段，传入字段名$NL$TBField studentAgeField = \1.getDeclaredField("studentAge");$NL$TB// 如果是私有的字段，需要调用下面这一行代码使其可使用，公有的字段则不需要下面这一行代码$NL$TB// studentAgeField.setAccessible(true);$NL$TB// 使用字段的set方法设置字段值，传入此对象以及参数值$NL$TBstudentAgeField.set(student, 10);$NL$TB// 4.获取声明的函数，传入所需参数的类名，如果有多个参数，用','连接即可$NL$TBMethod studentShowMethod = \1.getDeclaredMethod("show", String.class);$NL$TB// 如果是私有的函数，需要调用下面这一行代码使其可使用，公有的函数则不需要下面这一行代码$NL$TBstudentShowMethod.setAccessible(true);$NL$TB// 使用函数的invoke方法调用此函数，传入此对象以及函数所需参数，如果有多个参数，用','连接即可。函数会返回一个Object对象，使用强制类型转换转成实际类型即可$NL$TBObject result = studentShowMethod.invoke(student, "message");$NL$TBSystem.out.println("result: " + result);$NL$NL}$NL$NLpublic static void test2() throws ClassNotFoundException {$NL$TB// 1.通过字符串获取Class对象，这个字符串必须带上完整路径名$NL$TBClass \1 = Class.forName("\2");$NL$TB// 2.通过类的class属性$NL$TBClass \12 = Student.class;$NL$TB// 3.通过对象的getClass()函数$NL$TBStudent studentObject = new Student();$NL$TBClass \13 = studentObject.getClass();$NL$NL$NL$TBSystem.out.println("class1 = " + \1 + "\n" +$NL$TB$TB"class2 = " + \12 + "\n" +$NL$TB$TB"class3 = " + \13 + "\n" +$NL$TB$TB"class1 == class2 ? " + (\1 == \12) + "\n" +$NL$TB$TB"class2 == class3 ? " + (\12 == \13));$NL$NL$NL$TB// 1.获取所有声明的字段$NL$TBField[] declaredFieldList = \1.getDeclaredFields();$NL$TBfor (Field declaredField : declaredFieldList) {$NL$TB$TBSystem.out.println("declared Field: " + declaredField);$NL$TB}$NL$TB// 2.获取所有公有的字段$NL$TBField[] fieldList = \1.getFields();$NL$TBfor (Field field : fieldList) {$NL$TB$TBSystem.out.println("field: " + field);$NL$TB}$NL$NL$NL$TB// 1.获取所有声明的构造方法$NL$TBConstructor[] declaredConstructorList = \1.getDeclaredConstructors();$NL$TBfor (Constructor declaredConstructor : declaredConstructorList) {$NL$TB$TBSystem.out.println("declared Constructor: " + declaredConstructor);$NL$TB}$NL$TB// 2.获取所有公有的构造方法$NL$TBConstructor[] constructorList = \1.getConstructors();$NL$TBfor (Constructor constructor : constructorList) {$NL$TB$TBSystem.out.println("constructor: " + constructor);$NL$TB}$NL$NL$NL$TB// 1.获取所有声明的函数$NL$TBMethod[] declaredMethodList = \1.getDeclaredMethods();$NL$TBfor (Method declaredMethod : declaredMethodList) {$NL$TB$TBSystem.out.println("declared Method: " + declaredMethod);$NL$TB}$NL$TB// 2.获取所有公有的函数$NL$TBMethod[] methodList = \1.getMethods();$NL$TBfor (Method method : methodList) {$NL$TB$TBSystem.out.println("method: " + method);$NL$TB}$NL}