#ifndef $UP(\1)_H$NL#define $UP(\1)_H$NL$NL#ifndef ARRAYSIZE$NL#define ARRAYSIZE(A) ((unsigned int)(sizeof(A)/sizeof(A[0])))$NL#endif$NL$NL$NL#define SIGMEB(VAL, NAME)  {#NAME, VAL},$NL$NLenum E_\2{$NL    INDEX_$UP(\2)_TEST_1,$NL    INDEX_$UP(\2)_TEST_2,$NL$NL    INDEX_$UP(\2)_MAX,$NL};$NL$NL$NL#define MULTI_$UP(\2)_ITEMS \$NL{\$NL    SIGMEB(0,INDEX_$UP(\2)_TEST_1)   \$NL    SIGMEB(0,INDEX_$UP(\2)_TEST_2)   \$NL};$NL$NL$NL$NLtypedef struct T_\2 {$NL    const char *mName;           /* 名称 */$NL    unsigned int mVal;     /* 值 */$NL}T_\2, *P_\2;$NL$NL$NL$NLclass \1$NL{$NLpublic:$NL    \1();$NL$NL    static unsigned int diagGet\2 (unsigned int dwIndex);$NL    static unsigned int diagSet\2 (unsigned int dwIndex, unsigned int dwVal);$NL    static unsigned int diagShow\2 ();$NL};$NL$NL#ifdef __cplusplus$NLextern "C" {$NL#endif$NL$NLunsigned int diagGet\2 (unsigned int dwIndex);$NLunsigned int diagSet\2 (unsigned int dwIndex, unsigned int dwVal);$NLunsigned int diagShow\2 ();$NL$NL#ifdef __cplusplus$NL}$NL#endif$NL$NL$NL#endif // $UP(\1)_H$NL$NL$NL$NL$NL$NL$NL//////////////////////源文件$NL//////////////////////源文件$NL//////////////////////源文件$NL#include <limits.h>$NL#include <stdio.h>$NL#include <stdlib.h>$NL#include <unistd.h>$NL#include <string.h>$NL#include "$LO(\1).h"$NL$NLT_\2 g_\2[INDEX_$UP(\2)_MAX] =$NL        MULTI_$UP(\2)_ITEMS;$NL$NL$NL$NL\1::\1()$NL{$NL$NL}$NL$NLunsigned int \1::diagGet\2 (unsigned int dwIndex)$NL{$NL    if(dwIndex >= INDEX_$UP(\2)_MAX)$NL    {$NL        return UINT_MAX;$NL    }$NL$NL    return g_\2[dwIndex].mVal;$NL}$NL$NLunsigned int \1::diagSet\2 (unsigned int dwIndex, unsigned int dwVal)$NL{$NL    if(dwIndex >= INDEX_$UP(\2)_MAX)$NL    {$NL        return UINT_MAX;$NL    }$NL    g_\2[dwIndex].mVal  = dwVal;$NL    return g_\2[dwIndex].mVal;$NL}$NL$NL$NLunsigned int \1::diagShow\2 ()$NL{$NL    unsigned int dwLp =  0;$NL$NL    printf("%-5s%-40s%-5s\n", "NO", "NAME", "VALUE");$NL    for(dwLp = 0;dwLp < ARRAYSIZE(g_\2);dwLp++)$NL    {$NL        printf("%-5u%-40s%-5u\n", dwLp+1, g_\2[dwLp].mName, g_\2[dwLp].mVal);$NL    }$NL$NL    return 0;$NL}$NL$NL#ifdef __cplusplus$NLextern "C" {$NL#endif$NL$NL$NLunsigned int diagGet\2 (unsigned int dwIndex)$NL{$NL    return \1::diagGet\2(dwIndex);$NL}$NL$NLunsigned int diagSet\2 (unsigned int dwIndex, unsigned int dwVal)$NL{$NL    return \1::diagSet\2(dwIndex, dwVal);$NL}$NL$NLunsigned int diagShow\2 ()$NL{$NL    return \1::diagShow\2();$NL}$NL$NL#ifdef __cplusplus$NL}$NL#endif$NL$NL$NL$NL$NL$NL$NL