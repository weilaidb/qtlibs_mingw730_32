#将文件转换成 S-record 格式$NLobjcopy -O srec \1 \1.srec$NL#将文件转换成 rawbinary 格式$NLobjcopy -O binary \1 \1.bin$NL$NL#生成一个不含重定位以及标号目标文件$NLobjcopy -S \1 \1.stripall$NL$NL#查看文件的段信息$NLreadelf \1.stripall -S $NL#去掉指定名称的节$NLobjcopy -R .comment \1 \1.remove$NL$NL#添加一个自定义的节到可执行文件并将一个文件内容添加到其中$NLobjcopy --add-section mysection=hello_text main main.add$NLreadelf -S main.add$NL$NL#将指定的段拷贝出来$NLobjcopy -j mysection main.add section_hello$NLreadelf -S section_hello$NL$NL$NL分离可执行文件以及调试信息并将两者关联$NL这里， main.debug 是包含调试信息的可执行文件（使用 gcc -g 编译生成），为了减小文件大小，并且同样可以进行调试，将可执行文件分成两个部分并如下处理：$NL$NL将其中的调试信息提取出来之后保存成一个文件，$NL再生成去掉调试信息的大小减少了的可执行文件，$NL最后通过链接的形式将两个文件关联。$NL过程如下：$NL1、生成调试信息文件$NLobjcopy --only-keep-debug main.debug main.debuginfo$NL这样，会将调试信息提取，保存到文件 main.debuginfo 中。$NL2、生成不含调试信息的可执行文件$NLobjcopy --strip-debug main.debug main.stripdebug$NL$NLls -l main main.debug main.stripdebug $NL3、为不含调试信息的可执行文件添加调试信息$NLobjcopy --add-gnu-debuglink=main.debuginfo main.stripdebug$NL$NL注意，实践发现：$NL$NL使用上面的命令之后， main.debuginfo 以及源代码 main.cpp 两个文件必须在同一个目录上面才能使用 gdb 进行调试，否则会在调试的时候出现找不到文件的问题。当然，就是使用 -g 的选项编译之后，也得让源文件放在正确的路径下面才能够在调试的时候载入文件。$NL对于原来没有使用 -g 生成的可执行文件，也可以使用这个方法为它添加调试信息让它(原来没有用 -g 生成的并且添加调试信息之后的可执行文件)可以调试。$NL$NL$NL$NL$NL$NL$NL$NL$NL