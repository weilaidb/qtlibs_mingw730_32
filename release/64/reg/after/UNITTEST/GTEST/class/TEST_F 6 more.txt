#include "gmock/gmock.h"$NLusing namespace ::testing;$NL$NL$NLclass An\1: public Test {$NLpublic:$NL$TB\1 \2;$NL$TBvoid SetUp() {$NL$TB$NL$TB}$NL$TBvoid TearDown() {$NL$TB$NL$TB}$NL};$NL$NLTEST_F(An\1, \3)$NL{$NL$NL$TBASSERT_TRUE(1==1);$NL$TBASSERT_FALSE(1==0);$NL$TBASSERT_THAT(1,Eq(1));$NL$NL//string judge$NL$TB//ASSERT_STREQ(expected_str, actual_str);$NL$TB//ASSERT_STRNE(str1, str2);$NL$TB//ASSERT_STRCASEEQ(expected_str, actual_str);$NL$TB//ASSERT_STRCASENE(str1, str2);$NL$NL//float judge$NL$TB//ASSERT_FLOAT_EQ(1.0000001f, 1.0f);$NL$TB//ASSERT_NEAR(1.009f,1.0f,0.01f);$NL$TB//ASSERT_STRCASEEQ(expected_str, actual_str);$NL$TB//ASSERT_STRCASENE(str1, str2);$TB$NL}$NL$NLTEST_F(An\1, \4)$NL{$NL$NL$TBASSERT_TRUE(1==1);$NL$TBASSERT_FALSE(1==0);$NL$TBASSERT_THAT(1,Eq(1));$NL$NL//string judge$NL$TB//ASSERT_STREQ(expected_str, actual_str);$NL$TB//ASSERT_STRNE(str1, str2);$NL$TB//ASSERT_STRCASEEQ(expected_str, actual_str);$NL$TB//ASSERT_STRCASENE(str1, str2);$NL$NL//float judge$NL$TB//ASSERT_FLOAT_EQ(1.0000001f, 1.0f);$NL$TB//ASSERT_NEAR(1.009f,1.0f,0.01f);$NL$TB//ASSERT_STRCASEEQ(expected_str, actual_str);$NL$TB//ASSERT_STRCASENE(str1, str2);  $NL}$NL$NLTEST_F(An\1, \5)$NL{$NL$NL$TBASSERT_TRUE(1==1);$NL$TBASSERT_FALSE(1==0);$NL$TBASSERT_THAT(1,Eq(1));$NL$NL//string judge$NL$TB//ASSERT_STREQ(expected_str, actual_str);$NL$TB//ASSERT_STRNE(str1, str2);$NL$TB//ASSERT_STRCASEEQ(expected_str, actual_str);$NL$TB//ASSERT_STRCASENE(str1, str2);$NL$NL//float judge$NL$TB//ASSERT_FLOAT_EQ(1.0000001f, 1.0f);$NL$TB//ASSERT_NEAR(1.009f,1.0f,0.01f);$NL$TB//ASSERT_STRCASEEQ(expected_str, actual_str);$NL$TB//ASSERT_STRCASENE(str1, str2);  $NL}$NL$NLTEST_F(An\1, \6)$NL{$NL$NL$TBASSERT_TRUE(1==1);$NL$TBASSERT_FALSE(1==0);$NL$TBASSERT_THAT(1,Eq(1));$NL$NL//string judge$NL$TB//ASSERT_STREQ(expected_str, actual_str);$NL$TB//ASSERT_STRNE(str1, str2);$NL$TB//ASSERT_STRCASEEQ(expected_str, actual_str);$NL$TB//ASSERT_STRCASENE(str1, str2);$NL$NL//float judge$NL$TB//ASSERT_FLOAT_EQ(1.0000001f, 1.0f);$NL$TB//ASSERT_NEAR(1.009f,1.0f,0.01f);$NL$TB//ASSERT_STRCASEEQ(expected_str, actual_str);$NL$TB//ASSERT_STRCASENE(str1, str2);  $NL}$NL$NLTEST_F(An\1, \7)$NL{$NL$NL$TBASSERT_TRUE(1==1);$NL$TBASSERT_FALSE(1==0);$NL$TBASSERT_THAT(1,Eq(1));$NL$NL//string judge$NL$TB//ASSERT_STREQ(expected_str, actual_str);$NL$TB//ASSERT_STRNE(str1, str2);$NL$TB//ASSERT_STRCASEEQ(expected_str, actual_str);$NL$TB//ASSERT_STRCASENE(str1, str2);$NL$NL//float judge$NL$TB//ASSERT_FLOAT_EQ(1.0000001f, 1.0f);$NL$TB//ASSERT_NEAR(1.009f,1.0f,0.01f);$NL$TB//ASSERT_STRCASEEQ(expected_str, actual_str);$NL$TB//ASSERT_STRCASENE(str1, str2);  $NL}$NL$NLTEST_F(An\1, \8)$NL{$NL$NL$TBASSERT_TRUE(1==1);$NL$TBASSERT_FALSE(1==0);$NL$TBASSERT_THAT(1,Eq(1));$NL$NL//string judge$NL$TB//ASSERT_STREQ(expected_str, actual_str);$NL$TB//ASSERT_STRNE(str1, str2);$NL$TB//ASSERT_STRCASEEQ(expected_str, actual_str);$NL$TB//ASSERT_STRCASENE(str1, str2);$NL$NL//float judge$NL$TB//ASSERT_FLOAT_EQ(1.0000001f, 1.0f);$NL$TB//ASSERT_NEAR(1.009f,1.0f,0.01f);$NL$TB//ASSERT_STRCASEEQ(expected_str, actual_str);$NL$TB//ASSERT_STRCASENE(str1, str2);  $NL}$NL