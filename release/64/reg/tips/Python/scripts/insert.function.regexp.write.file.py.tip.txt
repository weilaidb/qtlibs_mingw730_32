#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#filename:insert.function.regexp.write.file.py
#function:正则表达式的结果函数写到对应文件

##########
#★

import sys
sys.path.append('.')
#自定义公共函数
from public import *



#####定义结束标志，标志未修改时为正常退出，默认为异常值，正常值为0
quitflag=1

def setquitflag(flag):
    global quitflag
    quitflag = flag

def over():
    global add
    printlntips("quitflag",quitflag, False)
    if 0 != quitflag:
        print('异常退出，！！！！！！！！')
    else:
        print('正常结束，★★★★★★★★★★★★★★★★')


atexit.register(over)

#处理函数正则，生成基类子类内容
def procregexp_generate_class(searchObj, writelist, classbase, classimpl):
    printlntips("========process regexp class")
    functype = searchObj.group(1)
    funcname_var =  searchObj.group(2)
    printlntips("functype",functype)
    printlntips("funcname_var",funcname_var)
    printlntips("writelist",writelist)
    printlntips("classbase",classbase)
    printlntips("classimpl",classimpl)

    # exp1 = space4() + "virtual "+ functype + funcname_var + semicolon();
    exp1 = "{0} virtual {1} {2};\n".format(space4(),functype, funcname_var)
    exp2 = "{0}{1}::{2}{3}{4}{5}{6}\n\n".format(functype,classbase, funcname_var, "\n{\n",space4(),"return 0;","\n}")
    exp3 = exp1
    exp4 = "{0}{1}::{2}{3}{4}{5}{6}\n\n".format(functype,classimpl, funcname_var, "\n{\n",space4(),"return 0;","\n}")
    printlntips("exp1",exp1)
    printlntips("exp2",exp2)
    printlntips("exp3",exp3)
    printlntips("exp4",exp4)
    
    
    fileappend(writelist[0], exp1)
    fileappend(writelist[1], exp2)
    fileappend(writelist[2], exp3)
    fileappend(writelist[3], exp4)


########main proc
if __name__ == '__main__':
    print("===========main proc===========\n" * 3)
    if len(sys.argv) < 5:
        print("usage: ./eg.sh input.txt writelist.txt 基类名称 子类名称\n")
        exit(0)

    print(sys.argv)
    
    signmao=":"
    signdot=","
    signenter="\n"
    signvlan="vlan"
    signempty = ""
    result = ""

    inputfilepath=sys.argv[1] #输入函数原型文件
    writelistpath=sys.argv[2] #输出要写的文件列表
    classbasename=sys.argv[3] #基类名称
    classimplname=sys.argv[4] #子类名称
    outputfile_basefuncd="output.base.function.d" #基类声明
    outputfile_basefunci="output.base.function.i" #基类实现
    outputfile_implfuncd="output.impl.function.d" #子类声明
    outputfile_implfunci="output.impl.function.i" #子类实现
    checkwritelistlen = 4

    println(inputfilepath)
    # # println(typeportfile)

    # checkdirnoexistquit(inputfilepath)
    checkfilenoexistquit(inputfilepath)
    checkfilenoexistquit(writelistpath)
    # #执行前先删除XML文件
    filedelete(outputfile_basefuncd)
    filedelete(outputfile_basefunci)
    filedelete(outputfile_implfuncd)
    filedelete(outputfile_implfunci)

    inputfileinfo = fileread(inputfilepath)
    printlntips("inputfile info",inputfileinfo)
    
    #检测写文件列表
    writefileinfo = fileread(writelistpath)
    printlntips("writlist info", writefileinfo)
    
    writesplit = splitstrbyenter(writefileinfo) 
    printlntips("writesplit info",writesplit)
    if(len(writesplit) < checkwritelistlen):
        printlntips("write list cout less than checkwritelistlen", len(writesplit))
        printlntips("checkwritelistlen", checkwritelistlen)
        exit(0)
        
    #检测写文件列表内容是否存在
    for item in writesplit:
        if(checklenzero(item) == 0):
            continue
        checkfilenoexistquit(item)

    #输入内容生成正则数据
    splitlistinput = splitstrbyenter(inputfileinfo) 
    printlntips("splitlistinput info",splitlistinput)

    for line in splitlistinput:
        if(checklenzero(line) == 0):
            continue
        printlntips("splitlistinput line:",line)
        searchObj = re.search( r'(\w+\s+\*?)([^)]+\));?.*', line, re.I)
 
        if searchObj:
            printlntips ("searchObj.group() : ", searchObj.group())
            printlntips ("searchObj.group(1) : ", searchObj.group(1))
            printlntips ("searchObj.group(2) : ", searchObj.group(2))
            procregexp_generate_class(searchObj, writesplit, classbasename, classimplname)
        else:
            printlntips ("Nothing found!!")

    # print(sys._getframe().f_lineno)     # 获取当前行号(行数)
    # println(result)
    # filewrite(xmlfile, result)
    #设置成功标志
    setquitflag(0)
