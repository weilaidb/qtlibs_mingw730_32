【3】Django----Settings.py配置详解

而又何羡乎

于 2021-05-20 15:58:03 发布

2454
 收藏 9
分类专栏： Django 文章标签： django python
版权

Django
专栏收录该内容
22 篇文章6 订阅
订阅专栏
Settings.py文件解读
settings.py包含了Django项目启动的所有配置项
配置项分为公有配置和自定义配置
配置项格式例为：BASE_DIR = ‘XXXX’大写的全局变量名与其对应的值这样的格式
公有配置-Django官方提供的基础配置
"""
mysite项目的配置文件
Django settings for mysite project.

该项目使用的Django版本
Generated by 'django-admin startproject' using Django 3.2.

查看更多的配置信息看下面这个链接
For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

查看全部配置文件和它们的值看下面这个链接
For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# 用于绑定项目文件位置的绝对路径(动态计算出来的)，所有文件夹都依赖于此路径
BASE_DIR = Path(__file__).resolve().parent.parent
# print(BASE_DIR)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# 安全警告:对生产中使用的密钥保密!
SECRET_KEY = 'django-insecure-uzm*y!935=+w(x7zcfp)ab5g4^nh5gu5^giq6v5ko*7ghuazg)'

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG项目的启动模式：
# 1.True:调试模式
#     检测代码改动后，立即重启服务
#     显示报错页面，便于查找错误
# 2.False:正式启动模式或者上线模式
#     不显示错误信息，改为False时，需要指定ALLOWED_HOSTS来过滤一些错误的请求
DEBUG = True
# 请求头Host头，有效的过滤一些请求，DEBUG = False必须配置
# ALLOWED_HOSTS = []
#[]空列表，表示只有请求头中host为127.0.0.1，localhost能访问本项目，-DEBUG=True时有效
#['*']，表示任何请求头的host都能访问当前项目
#['192.168.1.3','127.0.0.1']，表示只有当前两个host的值才能访问当前项目

# 如果要在局域网其它主机也能访问此主机的Django服务，需要更改启动方式如下：
# 1. 启动服务方式应该改为 py manage.py runserver 0.0.0.0:xxxx
# 2. 指定网络设备，如果内网环境下其它主机想访问该站点，需要添加ALLOWED_HOSTS=['内网IP']，否则访问进不来
# 3. 通过在Linux终端命令中 ifconfig查看内网IP地址;windows终端中通过ipconfig查看内网IP地址
ALLOWED_HOSTS = ['192.168.31.1']

# Application definition

# 注册Django应用
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'app01.apps.App01Config',
]

# 注册中间件
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# 表明Django主路由的位置
ROOT_URLCONF = 'mysite.urls'

# 指定模板配置信息
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# 正式启动的时候会用
WSGI_APPLICATION = 'mysite.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases
# 数据库配置
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/
# 语言信息配置
# LANGUAGE_CODE = 'en-us' #英文
LANGUAGE_CODE = 'zh-hans'  # 中文
# 时区设置
# TIME_ZONE = 'UTC' # 世界标准时区
TIME_ZONE = 'Asia/Shanghai' # 中国时区

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
私有配置-自定义配置
创建一个local_settings.py自己的私有配置，在本地的local_settings.py会将默认的settings.py的文件覆盖。测试时，则删除自己的local_settings.py，测试人员通过自己设置进行测试。
创建自己的local_settings.py
修改setting.py存在的配置
# 直接利用settings.py的变量名，修改即可
LANGUAGE_CODE = 'zh-hans'
1
2
增加settings.py中不存在的配置

settings.py导入local_settings.py
# settings.py导入local_settings中的代码，如果存在则使用，反之。位于末尾
try:
    from .local_settings import *
except ImportError:
    pass
1
2
3
4
5

注：给别人代码时，不要给local_settings.py，避免重要信息泄露
命名规则为全部大写的全局变量
自定义配置时避免与默认的配置重复
引用配置
settings.py中的所有配置项，都可以在其它地方进行引用，方法如下：
from django.conf import settings
settings.BASE_DIR # 按需取用
————————————————
版权声明：本文为CSDN博主「而又何羡乎」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/qq_44285092/article/details/117078272