struct sk_buff 的成员 head 指向一个已分配的空间的头部，该空间用于承载网络数据，end 指向该空
间的尾部，这两个成员指针从空间创建之后，就不能被修改。data 指向分配空间中数据的头部，tail 指向
数据的尾部，这两个值随着网络数据在各层之间的传递、修改，会被不断改动。所以，这四个指针指向
共同的一块内存区域的不同位置，该内存区域由__alloc_skb 在创建缓冲区时创建。
那指向的这块内存区域有多大呢？一般由外部根据需要传入。外部设定这个大小时，会根据实际数
据量加上各层协议的首部，再加 15(为了处理对齐）传入，在__alloc_skb 中根据各平台不同进行长度向上
对齐。但是，我们另外还要加上一个存放结构体 struct skb_shared_info 的空间，也就是说 end 并不真正指
向内存区域的尾部，在 end 后面还有一个结构体 struct skb_shared_info，下面是其定义：
 struct skb_shared_info{
 atomic_t dataref; //引用计数。
 unsigned short nr_frags; //数据片段的数量。
 unsigned short tso_size;

unsigned short tso_segs; 
unsigned short ufo_size; 
unsigned int ip6_frag_id; 
struct sk_buff *frag_list; //数据片段的链表。 
skb_frag_t frags[MAX_SKB_FRAGS]; //每一个数据片段的长度。 
}; 
这个结构体存放分隔存储的数据片段，将数据分解为多个数据片段是为了使用分散/聚集 I/O。 
如果是在 skbuff_fclone_cache 中创建，则创建一个 struct sk_buff 后，还要把紧邻它的一个 struct sk_buff 
的 fclone 成员置标志 SKB_FCLONE_UNAVAILABLE，表示该缓冲区还没有被创建出来，同时置自己的 
fclone 为 SKB_FCLONE_ORIG，表示自己可以被克隆。最后置引用计数为 1。 
最后，truesize 表示缓存区的整体长度，置为 sizeof(struct sk_buff)+传入的长度，不包括结构 struct 
skb_shared_info 的长度。 
