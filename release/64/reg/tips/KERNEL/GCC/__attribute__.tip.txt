void exit(int)

__attribute__((weakref("OsSetConsoleID")));

弱引用
https://www.cnblogs.com/traditional/p/11870281.html
Python 中变量直接引用对象是强引用，会增加对象的引用计数；而所谓弱引用，就是一个变量在引用一个对象的时候，不会增加这个对象的引用计数。

C 的角度来看强引用和弱引用
首先 C 源代码变成可执行文件会经历如下几个步骤：

1. 预处理: 进行头文件展开, 宏替换等等;
2. 编译: 通过词法分析和语法分析, 将预处理之后的文件翻译成汇编代码, 内存分配也是在此过程完成的;
3. 汇编: 将汇编代码翻译成目标文件, 目标文件中存放的也就是和源文件等效的机器代码;
4. 链接: 程序中会引入一些外部库, 需要将目标文件中的符号与外部库的符号链接起来, 最终形成一个可执行文件;
而链接这一步，这些符号必须要能够被正确决议，如果没有找到某些符号的定义，连接器就会报错，这种就是强引用；而对于弱引用，如果该符号有定义，则链接器将该符号的引用决议，如果该符号未被定义，则链接器也不会报错。

链接器处理强引用和弱引用的过程几乎一样，只是对于未定义的弱引用，链接器不认为它是一个错误的值。一般对于未定义的弱引用，链接器默认其为0，或者是一个其它的特殊的值，以便于程序代码能够识别。

弱引用确实是一个比较复杂的地方，尽管 weakref 这个模块用起来比较简单，但是在解释器层面，弱引用还是不简单的。
