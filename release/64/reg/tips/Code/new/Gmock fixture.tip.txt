Google Mock会在运行每个测试时创建fixture类实例。在Google Mock运行RetainSoleLetterOfOneLetterWord前，它先创建一个SoundexEncoding类实例。
1.将宏TEST替换为TEST_F,F表示fixture
2.去掉测试中重复的Soundex类实例至少会产生两个影响:
1)提升测试的抽象度。现在每个测试中只包含两行代码，有助于集中精力关注与测试相关的东西
2）降低未来维护测试的开销。试想一下我们必须改变Soundex类实例的构造方式（譬如我们需要能够将语言种类作为一个构造函数的参数）。将Soundex类实例的构造放到fixture中，这意味着改动一个地方即可。否则，要改动每个测试。

示例:
#include <string>

class Soundex
{
public:
   std::string encode(const std::string& word) const {
      return zeroPad(word);
   }

private:
   std::string zeroPad(const std::string& word) const {
      return word + "000";
   }
};


#include "gmock/gmock.h" 

using testing::Eq;

class SoundexEncoding: public testing::Test {
public:
   Soundex soundex;--此处声明了每个测试接口中公共的定义
};

--此处将宏TEST更改为TEST_F
TEST_F(SoundexEncoding, RetainsSoleLetterOfOneLetterWord) {
   auto encoded = soundex.encode("A");

   ASSERT_THAT(encoded, Eq("A000")); 
}

TEST_F(SoundexEncoding, PadsWithZerosToEnsureThreeDigits) {
   auto encoded = soundex.encode("I");

   ASSERT_THAT(encoded, Eq("I000"));
}