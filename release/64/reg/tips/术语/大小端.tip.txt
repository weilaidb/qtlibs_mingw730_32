大小端模式

Jerry Shaw

于 2016-01-09 15:48:46 发布

295
 收藏
分类专栏： C 文章标签： 内存 大小端 C-C++
版权

C
专栏收录该内容
3 篇文章0 订阅
订阅专栏
大小端模式
大小端模式
大端模式
小端模式
为什么会有大小端模式
大小端模式识别图解
大端模式，是指数据的高字节保存在内存的低地址中，而数据的低字节保存在内存的高地址中，这样的存储模式有点儿类似于把数据当作字符串顺序处理:地址由小向大增加，而数据从高位往低位放;

小端模式，是指数据的高字节保存在内存的高地址中，而数据的低字节保存在内存的低地址中，这种存储模式将地址的高低和数据位权有效地结合起来，高地址部分权值高，低地址部分权值低，和我们的逻辑方法一致。

大端模式
所谓的大端模式，是指数据的高位，保存在内存的低地址中，而数据的低位，保存在内存的高地址中，这样的存储模式有点儿类似于把数据当作字符串顺序处理：地址由小向大增加，而数据从高位往低位放。 —— [ 好搜百科 ]

例子：

0000430: e684 6c4e 0100 1800 53ef 0100 0100 0000

0000440: b484 6c4e 004e ed00 0000 0000 0100 0000

在大端模式下，前16位应该这样读: e684

记忆方法: 地址的增长顺序与值的增长顺序相同

小端模式
所谓的小端模式，是指数据的高位保存在内存的高地址中，而数 据的低位保存在内存的低地址中，这种存储模式将地址的高低和数据位权有效地结合起来，高地址部分权值高，低地址部分权值低，和我们的逻辑方法一致。 —— [ 好搜百科 ]

例子：

0000430: e684 6c4e 0100 1800 53ef 0100 0100 0000

0000440: b484 6c4e 004e ed00 0000 0000 0100 0000

在小端模式下，前16位应该这样读: 84e6

记忆方法: 地址的增长顺序与值的增长顺序相反

为什么会有大小端模式
**为什么会有大小端模式之分呢？这是因为在计算机系统中，我们是以字节为单位的，每个地址单元都对应着一个字节，一个字节为 8bit。但是在C语言中除了8bit的char之外，还有16bit的short型，32bit的long型（要看具体的编译器），另外，对于位数大于 8位的处理器，例如16位或者32位的处理器，由于寄存器宽度大于一个字节，那么必然存在着一个如何将多个字节安排的问题。因此就导致了大端存储模式和小端存储模式。例如一个16bit的short型x，在内存中的地址为0x0010，x的值为0x1122，那么0x11为高字节，0x22为低字节。对于 大端模式，就将0x11放在低地址中，即0x0010中，0x22放在高地址中，即0x0011中。小端模式，刚好相反。我们常用的X86结构是小端模式，而KEIL C51则为大端模式。很多的ARM，DSP都为小端模式。有些ARM处理器还可以由硬件来选择是大端模式还是小端模式。

大小端模式识别图解


如图，0x1122的高位22出现在低字节，低位11出现在高字节，所以，这是小端模式。如果右边的内存窗口0x0018FE58和0x0018FE59位置显示的是1122，则是大端模式。
————————————————
版权声明：本文为CSDN博主「Jerry Shaw」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/jialexiao/article/details/50488206