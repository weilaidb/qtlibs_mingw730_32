gcc编译选项-fpermissive

不闻窗外事

于 2019-03-29 16:55:07 发布

25693
 收藏 18
分类专栏： gcc 文章标签： -fpermissive
版权

gcc
专栏收录该内容
1 篇文章0 订阅
订阅专栏
man手册该选项的说明如下：    

   -fpermissive
           Downgrade some diagnostics about nonconformant code from errors to warnings.  Thus, using -fpermissive will allow some nonconforming code to compile.
该选项会将不一致代码的诊断从错误降级为警告。

该选项最好不要使用，因为会降低对于代码检查的严格性。

例子：

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
 
const static char *source = "source";
 
int main(int argc, char *argv[])
{
	char buf[512];
	snprintf(buf, "%s", source);
	return 0;
}
在该代码中，snprintf并没有使用第二个参数sizeof(buf),如果不使用该选项，编译结果如下所示：

fpermissive.cpp: In function ‘int main(int, char**)’:
fpermissive.cpp:10: 错误：从类型 ‘const char*’ 到类型 ‘size_t’ 的转换无效
fpermissive.cpp:10: 错误：  初始化实参 2，属于 ‘int snprintf(char*, size_t, const char*, ...)’
可以看到，报的是错误，如果加上该选项编译，结果如下：

fpermissive.cpp: In function ‘int main(int, char**)’:
fpermissive.cpp:10: 警告：从类型 ‘const char*’ 到类型 ‘size_t’ 的转换无效
fpermissive.cpp:10: 警告：  初始化实参 2，属于 ‘int snprintf(char*, size_t, const char*, ...)’
可以看到，从错误级别降为了警告级别，而这可能会给程序带来意想不到的问题，所以，最好还是不要使用该选项。
————————————————
版权声明：本文为CSDN博主「不闻窗外事」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/qu1993/article/details/88896589