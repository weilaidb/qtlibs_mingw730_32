3.JDK的元Annotation（修饰注解的注解）
元注解(Meta Annotation)：和元数据一样，修饰注解的注解。
java提供了6个元注解（Meta Annotation)，在java.lang.annotation中。其中5个用于修饰其他的Annonation定义。而@Repeatable专门用于定义Java8新增的重复注解。所以要定义注解必须使用到5个元注解来定义。
@Retention（英文：保留）
用于指定被修饰的Annotation可以保留多长时间，只能修饰Annotation定义。@Retention包含一个RetentionPolicy类型的value成员变量，使用@Retention必须为该value成员变量指定值。value成员变量的值有3个选择：
RetentionPolicy.CLASS:编译器将把Annotation记录在class文件中。当运行java程序时，JVM不可获取Annotation信息。（默认值）
RetentionPolicy.RUNTIME:编译器将把Annotation记录在class文件中。当运行java程序时，JVM也可获取Annotation信息，程序可以通过反射获取该Annotation信息
RetentionPolicy.SOURCE:Annotation只保留在源代码中（.java文件中），编译器直接丢弃这种Annotation。
案例：
//定义下面的Testable Annotation保留到运行时，也可以使用value=RetentionPolicy.RUNTIME
@Retention(RetentionPolicy.RUNTIME)
public @interface Testable{}
@Target ( 目标)
用于指定被修饰的Annotation能用于修饰哪些程序单元，只能修饰Annotation定义。它包含一个名为value的成员变量，取值如下：

@Target(ElementType.ANNOTATION_TYPE)：指定该该策略的Annotation只能修饰Annotation.
@Target(ElementType.TYPE) //接口、类、枚举、注解
@Target(ElementType.FIELD) //成员变量（字段、枚举的常量）
@Target(ElementType.METHOD) //方法
@Target(ElementType.PARAMETER) //方法参数
@Target(ElementType.CONSTRUCTOR) //构造函数
@Target(ElementType.LOCAL_VARIABLE)//局部变量
@Target(ElementType.PACKAGE) ///修饰包定义
@Target(ElementType.TYPE_PARAMETER) //java8新增，后面Type Annotation有介绍
@Target(ElementType.TYPE_USE) ///java8新增，后面Type Annotation有介绍
@Target(ElementType.FIELD)
public @interface ActionListenerFor{}
@Documented
用于指定被修饰的Annotation将被javadoc工具提取成文档。即说明该注解将被包含在javadoc中。
@Inherited
用于指定被修饰的Annotation具有继承性。即子类可以继承父类中的该注解。---》注解@WW被元注解@Inherited修饰，把@WW添加在类Base上，则Base的所有子类也将默认使用@WW注解。
5.自定义注解
使用@interface关键字
注解放在修饰元素的上面
5.1一个简单的注解
//定义一个简单的注解Test
public @interface Test{}
默认情况下，Annotation可以修饰任何程序元素:类、接口、方法等。

@Test
public class MyClass{

}
5.2带成员变量的注解
以无形参的方法形式来声明Annotation的成员变量，方法名和返回值定义了成员变量名称和类型。使用default关键字设置初始值。没设置初始值的变量则使用时必须提供，有初始值的变量可以设置也可以不设置。
//定义带成员变量注解MyTag
@Rentention(RetentionPolicy.RUNTIME)
@Target(ElementType.METHOD)
public @interface MyTag{
  //定义两个成员变量，以方法的形式定义
  String name();
  int age() default 32;
}

//使用
public class Test{
  @MyTag(name="liang")
  public void info(){}
}
5.3结论
没带成员变量的Annotation被称为标记，这种注解仅利用自身的存在与否来提供信息，如@Override等。
包含成员变量的Annotation称为元数据Annotation,因为他们提供更多元数据。

作者：zlcook
链接：https://www.jianshu.com/p/28edf5352b63
来源：简书
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。