.ftl文件简介及语法

泡沫9水灵灵

于 2016-05-24 14:19:12 发布

60953
 收藏 36
分类专栏： html 文章标签： ftl
版权

html
专栏收录该内容
4 篇文章0 订阅
订阅专栏
1、Freemarker模板的文件后缀名
2、Freemarker其实是一种比较简单的网页展示技术，说白了就是网页模板和数据模型的结合体。这种结合模式的好处就是，分离了网页界面设计人员和编程人员的工作，让他们各司其职。
据个人理解，Freemarker大致的工作方式是，网页模板里面嵌入了数据模型中的数据、Freemarker自定义流程控制语言、Freemarker自定义的操作函数等等，在装载网页的时候，Freemarker模板自动从数据模型中提取数据，并解释整个网页为我们熟知的HTML页面。
在B/S程式设计中，常常有美工和程序员二个角色，他们具有不同专业技能：美工专注于表现——创建页面、风格、布局、效果等等可视元素；而程序员则忙于创建程式的商业流程，生成设计页面要显示的数据等等。
很多时候，要显示的资料在设计的时候并不存在，它们一般是在运行时由程式产生的，比如执行“价格不高于800NT的USB Disk”查询的返回结果。这种技术需求产生了JSP等Scriptlet，JSP十分强大，但是也常常被滥用，并导致一些不良的后果,将逻辑和表现混合在一起。,破坏了美工和程序员职责的正常分解使JSP页面难以阅读和维护。
模板引擎就是为了解决上面的问题而产生的。在设计HTML的时候，我们加入一些特定指令来指定要插入哪些数据，这些加了特殊指令的HTML或者其他文本，我们称为模板(Template)。而模板引擎会在输出页面时，用适当的数据替代这些代码
模板和嵌入JSP的HTML是不同的，模板指令只有很有限的编程能力，可以避免混入商业逻辑。
总结
简单的说，FreeMarker就是一种用Java编写的模板引擎，它根据模板输出多种规格的文本。特别指出的是，FreeMarker与Web应用框架无关，它同样可以应用在非Web应用程序环境中，而且，FreeMarker并不是只能生成HTML页面，它也可以生成各种文本，如XML/RTF/Java源代码等。
Freemarker是一个非常优秀的模版引擎，这个模版引擎可用于任何场景，FreeMarker负责将数据模型中的数据合并到模版中，从而生成标准输出。
FreeMarker特别适应与MVC模式的Web应用，通常有Java程序准备要显示的数据，由FreeMarker模版引擎来生成页面，而FreeMarker模版则提供页面布局支持，从而能更好地规范MVC架构，保证视图逻辑和业务逻辑分离。
语法：

直接调用后台方法代码
<PRE class=ftl name="code">默认两种用法   
${!("")}   
${default("")}</PRE>   
<@s.property value="%{getPieceByType(type)}"/>   
getPieceByType为方法名，type为值  

Ftl代码默认两种用法   ${!("")}   ${default("")}  默认两种用法 
${!("")} 
${default("")} 
<@s.property value="%{getPieceByType(type)}"/> 
getPieceByType为方法名，type为值 

时间格式化的方法代码 
最好加上 判断下c时候存在   
<#if c??>   
${c.addtime?string("yyyy-MM-dd HH:mm:ss")   
</#if>  

最好加上判断下c时候存在 
<#if c??> 
${c.addtime?string("yyyy-MM-dd HH:mm:ss") 
</#if>  

判断长度并截取代码 
<#if c.titleH1??>   
<#if c.titleH1?length lt 33>   
${c.titleH1}   
action 中   
配置    
private String inputPath;    
private HttpServletResponse servletResponse;    

public void setServletResponse(HttpServletResponse arg0) {   
this.servletResponse = arg0;    
}   

public HttpServletResponse getServletResponse() {   
return servletResponse;   
}    

public String formguideDownloads() throws Exception {   
formguide.setTemplateId(formguide.getTemplateId()+".jsp");     
return SUCCESS;         
}   

xml中配置   
<action name="formguideDownloads" class="com.jcauto.cms.action.FormguideAction" method="formguideDownloads">       
<result name="success" type="stream">       
<param name="contentType">text/plain;charset=utf-8</param>     
<param name="inputName">inputStream</param>         
<param name="contentDisposition">attachment;filename="${formguide.templateId}"</param>     
<param name="bufferSize">4096</param>       
</result>     
</action>      

页面上   
formguide/formguideDownloads.action?formguide.templateId=${form.templateId?if_exists}&inputPath=${fileUrlFileName?if_exists}${form.templateId?if_exists}.jsp" <#else>   
${c.titleH1[0..32]}...   
</#if>   
</#if>   
注意length是从0开始算所以如果想截取33位就使用0..32就可以了  

<#if c.titleH1??> 
<#if c.titleH1?length lt 33> 
${c.titleH1} 
action 中 
配置 
private String inputPath; 
private HttpServletResponse servletResponse; 

public void setServletResponse(HttpServletResponse arg0) { 
this.servletResponse = arg0; 
} 

public HttpServletResponse getServletResponse() { 
return servletResponse; 
} 

public String formguideDownloads() throws Exception { 
formguide.setTemplateId(formguide.getTemplateId()+".jsp");  
return SUCCESS;      
} 

xml中配置 
<action name="formguideDownloads" class="com.jcauto.cms.action.FormguideAction" method="formguideDownloads">    
<result name="success" type="stream">    
<param name="contentType">text/plain;charset=utf-8</param>  
<param name="inputName">inputStream</param>      
<param name="contentDisposition">attachment;filename="${formguide.templateId}"</param>  
<param name="bufferSize">4096</param>    
</result>  
</action>   

页面上 
formguide/formguideDownloads.action?formguide.templateId=${form.templateId?if_exists}&inputPath=${fileUrlFileName?if_exists}${form.templateId?if_exists}.jsp" <#else> 
${c.titleH1[0..32]}... 
</#if> 
</#if> 
注意length是从0开始算所以如果想截取33位就使用0..32就可以了 

List-map使用代码 
ftl.list   
<#list List as list>   
${list}   
</#list>   
list_index取出行号索引从0开始                 
formguideList?size 可以判断list大小   
这里多说一句有很多list中属性的用法不一一列举，大家可以查下ftl API    
ftl.map   
<#list Map?keys as s>   
${Map[s]}   
</#list>   

s.list   
<@s.iterater value="List" var=list>   
</@s.iterater>   
s.if   
<@s.if>   
</@>   
<@s.else>   
</@>   
ftl.if   
<#if>   
<#else>   
</#if>  

ftl.list 
<#list List as list> 
${list} 
</#list> 
list_index取出行号索引从0开始              
formguideList?size 可以判断list大小 
这里多说一句有很多list中属性的用法不一一列举，大家可以查下ftl API 
ftl.map 
<#list Map?keys as s> 
${Map[s]} 
</#list> 

s.list 
<@s.iterater value="List" var=list> 
</@s.iterater> 
s.if 
<@s.if> 
</@> 
<@s.else> 
</@> 
ftl.if 
<#if> 
<#else> 
</#if> 

上传代码 
<form actoin="${path}/piece/findPiece.action" name="form1" method="Post" enctype="multipart/form-data">    
<s:file name="sfile"/>   
</form>   
后台action中配置   
File sfile;   
String sfileName;   
String sfileType;  

<form actoin="${path}/piece/findPiece.action" name="form1" method="Post" enctype="multipart/form-data"> 
<s:file name="sfile"/> 
</form> 
后台action中配置 
File sfile; 
String sfileName; 
String sfileType; 

下载代码 
前台   
<a href="${path}/formguide /formguideDownloads.action?formguide.templateId=${form.templateId?if_exists}& amp;inputPath=${fileUrlFileName?if_exists}${form.templateId?if_exists}.jsp"& gt;下载</a> |     

后台   
private HttpServletResponse servletResponse;     
private String inputPath;    
public void setServletResponse(HttpServletResponse arg0) {   
this.servletResponse = arg0;    
}   

public HttpServletResponse getServletResponse() {   
return servletResponse;   
}   
public String formguideDownloads() throws Exception {   
formguide.setTemplateId(formguide.getTemplateId()+".jsp");     
return SUCCESS;         
}   

public InputStream getInputStream() throws Exception {    
return ServletActionContext.getServletContext().getResourceAsStream(   
inputPath);     
}   

xml   
<action name="formguideDownloads" class="com.jcauto.cms.action.FormguideAction" method="formguideDownloads">       
<result name="success" type="stream">       
<param name="contentType">text/plain;charset=utf-8</param>     
<param name="inputName">inputStream</param>         
<param name="contentDisposition">attachment;filename="${formguide.templateId}"</param>     
<param name="bufferSize">4096</param>       
</result>     
</action>    

前台 
<a href="${path}/formguide /formguideDownloads.action?formguide.templateId=${form.templateId?if_exists}& amp;inputPath=${fileUrlFileName?if_exists}${form.templateId?if_exists}.jsp"& gt;下载</a> |  

后台 
private HttpServletResponse servletResponse;  
private String inputPath; 
public void setServletResponse(HttpServletResponse arg0) { 
this.servletResponse = arg0; 
} 

public HttpServletResponse getServletResponse() { 
return servletResponse; 
} 
public String formguideDownloads() throws Exception { 
formguide.setTemplateId(formguide.getTemplateId()+".jsp");  
return SUCCESS;      
} 

public InputStream getInputStream() throws Exception { 
return ServletActionContext.getServletContext().getResourceAsStream( 
inputPath);  
} 
xml 
<action name="formguideDownloads" class="com.jcauto.cms.action.FormguideAction" method="formguideDownloads">    
<result name="success" type="stream">    
<param name="contentType">text/plain;charset=utf-8</param>  
<param name="inputName">inputStream</param>      
<param name="contentDisposition">attachment;filename="${formguide.templateId}"</param>  
<param name="bufferSize">4096</param>    
</result>  
</action>    

Ftl中的循环代码 
使用宏标签来循环生成固定的值   
其中local中来定义值   
repeat用来生成   
<#macro repeat count>   
<#local y = "<img src='http://www.jcauto.com.cn/ProConsole/images/star0506.gif' border='0' alt='' width='11' height='11'/>">   
<#list 1..count as x>   
${y} ${count}/${x}: <#nested>   
</#list>   
</#macro>   
<@repeat count=3>${y?default("?")} ${x?default("?")} ${count?default("?")}</@repeat>  

使用宏标签来循环生成固定的值 
其中local中来定义值 
repeat用来生成 
<#macro repeat count> 
<#local y = "<img src='http://www.jcauto.com.cn/ProConsole/images/star0506.gif' border='0' alt='' width='11' height='11'/>"> 
<#list 1..count as x> 
${y} ${count}/${x}: <#nested> 
</#list> 
</#macro> 
<@repeat count=3>${y?default("?")} ${x?default("?")} ${count?default("?")}</@repeat> 

Ftl变量转换代码 
?number转为数字   
?c转为字符串   
?string转为字符串   
?currency（货币）   
?percent(百分比)   
trim 删除字符串首尾空格 ${“  String ”?trim} 结果为String   
split使用指定的分隔符将一个字符串拆分为一组字符串   
<#list “This|is|split”?split(“|”) as s>   
${s}   
</#list>   
${“strabg”?replace(“ab”,”in”)} 结果为string   
${“string”?contains(“ing”)?string} 结果为true   
注意：布尔值必须转换为字符串才能输出   
${“string”?index_of(“in”) 结果为3  
${“string”?index_of(“ab”) 结果为-1  
length返回字符串的长度 ${“string”?length}结果为6  
lower_case将字符串转为小写   
${“STRING”?lower_case}à结果为string   
upper_case将字符串转为大写   
${“string”?upper_case}à结果为STRING   
ends_with 判断某个字符串是否由某个子串结尾，返回布尔值。   
${“string”?ends_with(“ing”)?string} 返回结果为true   
注意：布尔值必须转换为字符串才能输出   
html 用于将字符串中的<、>、&和“替换为对应得&lt;&gt;&quot:&amp   
index_of（substring,start）在字符串中查找某个子串，返回找到子串的第一个字符的索引，如果没有找到子串，则返回-1。   
Start参数用于指定从字符串的那个索引处开始搜索，start为数字值。   
如果start大于字符串长度，则start取值等于字符串长度，如果start小于0， 则start取值为   
${‘str’?substring(0)}à结果为str   
${‘str’?substring(0,1)}à结果为s   

2.cap_first 将字符串中的第一个单词的首字母变为大写。   
${‘str’？cap_first}à结果为Str   

3.uncap_first将字符串中的第一个单词的首字母变为小写。   
${‘Str’？cap_first}à结果为str   

4.capitalize将字符串中的所有单词的首字母变为大写   
${‘str’？ capitalize}à结果为STR   
date,time，datetime将字符串转换为日期   
例如：   
<#assign date1=”2009-10-12”?date(“yyyy-MM-dd”)>   
<#assign date2=”9:28:20”?time(“HH:mm:ss”)>   
<#assign date3=” 2009-10-12 9:28:20”?time(“HH:mm:ss”)>   
${date1}à结果为2009-10-12  
${date2}à结果为9:28:20  
${date3}à结果为2009-10-12 9:28:20  

?number转为数字 
?c转为字符串 
?string转为字符串 
?currency（货币） 
?percent(百分比) 
trim 删除字符串首尾空格 ${“  String ”?trim} 结果为String 
split使用指定的分隔符将一个字符串拆分为一组字符串 
<#list “This|is|split”?split(“|”) as s> 
${s} 
</#list> 
${“strabg”?replace(“ab”,”in”)} 结果为string 
${“string”?contains(“ing”)?string} 结果为true 
注意：布尔值必须转换为字符串才能输出 
${“string”?index_of(“in”) 结果为3 
${“string”?index_of(“ab”) 结果为-1 
length返回字符串的长度 ${“string”?length}结果为6 
lower_case将字符串转为小写 
${“STRING”?lower_case}à结果为string 
upper_case将字符串转为大写 
${“string”?upper_case}à结果为STRING 
ends_with 判断某个字符串是否由某个子串结尾，返回布尔值。 
${“string”?ends_with(“ing”)?string} 返回结果为true 
注意：布尔值必须转换为字符串才能输出 
html 用于将字符串中的<、>、&和“替换为对应得&lt;&gt;&quot:&amp 
index_of（substring,start）在字符串中查找某个子串，返回找到子串的第一个字符的索引，如果没有找到子串，则返回-1。 
Start参数用于指定从字符串的那个索引处开始搜索，start为数字值。 
如果start大于字符串长度，则start取值等于字符串长度，如果start小于0， 则start取值为 
${‘str’?substring(0)}à结果为str 
${‘str’?substring(0,1)}à结果为s 

2.cap_first 将字符串中的第一个单词的首字母变为大写。 
${‘str’？cap_first}à结果为Str 

3.uncap_first将字符串中的第一个单词的首字母变为小写。 
${‘Str’？cap_first}à结果为str 

4.capitalize将字符串中的所有单词的首字母变为大写 
${‘str’？ capitalize}à结果为STR 

date,time，datetime将字符串转换为日期 
例如： 
<#assign date1=”2009-10-12”?date(“yyyy-MM-dd”)> 
<#assign date2=”9:28:20”?time(“HH:mm:ss”)> 
<#assign date3=” 2009-10-12 9:28:20”?time(“HH:mm:ss”)> 
${date1}à结果为2009-10-12 
${date2}à结果为9:28:20 
${date3}à结果为2009-10-12 9:28:20 

宏定义hash内置函数代码 
Hash的内置函数   
1.hash?keys 返回hash里的所有key,返回结果为sequence   

2.hash?values 返回hash里的所有value,返回结果为sequence   
例如：   
<#assign user={“name”:“hailang”, “sex”:“man”}>   
<#assign keys=user?keys>   
<#list keys as key>   
${key}=${user[key]}   
</#list>  

Hash的内置函数 
1. hash?keys 返回hash里的所有key,返回结果为sequence 

2.hash?values 返回hash里的所有value,返回结果为sequence 
例如： 
<#assign user={“name”:“hailang”, “sex”:“man”}> 
<#assign keys=user?keys> 
<#list keys as key> 
${key}=${user[key]} 
</#list>
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
289
290
291
292
293
294
295
296
297
298
299
300
301
302
303
304
305
306
307
308
309
310
311
312
313
314
315
316
317
318
319
320
321
322
323
324
325
326
327
328
329
330
331
332
333
334
335
336
337
338
339
340
341
342
343
344
345
346
347
348
349
350
351
352
353
354
355
356
357
358
359
360
361
362
363
364
365
366
367
368
369
370
371
372
373
374
375
376
377

开发者涨薪指南

48位大咖的思考法则、工作方式、逻辑体系

泡沫9水灵灵
关注

18


1

36


专栏目录

FTL快速入门
09-09
FreeMarker基于设计者和程序员是具有不同专业技能的不同个体的观念。 他们是分工劳动的： 设计者专注于表示——创建HTML文件、图片、Web页面的其它可视化方面； 程序员创建系统，生成设计页面要显示的数据。 在这里，你可以在HTML（或其它要输出的文本）中加入一些特定指令，FreeMarker会在输出页面给最终用户时，用适当的数据替代这些代码。


 




渣渣龙爱学习
2019.12.08

怎么写呢？

茕星
2018.09.19

大哥，ftl文件怎么写啊

幸福的小猪猪2015
2016.07.15

导出word时，怎么加页眉页脚？
————————————————
版权声明：本文为CSDN博主「泡沫9水灵灵」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/u010147288/article/details/51489896