4.2 MyBatis简介
本节带领大家对MyBatis进行整体概览。
4.2.1 概述
MyBatis源自于Apache开源项目iBatis，2010年改名为MyBatis。iBatis是一个基于Java的持久层框架，提供的持久层框架包括SQL Maps和Data Access Objects（DAO）。
MyBatis采用面向对象编程的方式对数据库进行CRUD的操作，这是的应用程序中对关系数据库的操作更加方便简单。MyBatis支持使用XML描述符配置文件和注解两种方式执行SQL语句。“简单灵活”是MyBatis在对象关系映射工具上的最大优势。
最早的主流ORM（对象关系映射）框架Hibernate，对数据库结构提供了完整的封装，提供了从POJO到数据库表的全套映射机制。程序员往往只需定义POJO到数据库表的映射关系，即可通过Hibernate提供的方法完成持久层操作，不需要对SQL熟练掌握，Hibernate会根据指定的存储逻辑，自动生成对应的SQL并调用JDBC接口加以执行。
这样的机制无往不利，但是，在一些特定的环境下，这种一站式的解决方案却捉襟见肘。比如下面这些的应用场景：
·出于安全考虑，只提供特定的SQL（或存储过程）以获取所需数据，数据库具体的表结构不予公开。
·开发规范中要求，所有牵涉到业务逻辑部分的数据库操作，必须在数据库层由存储过程实现（例如，金融行业的软件有在开发规范中严格指定）。
·系统数据处理量巨大，对性能要求极为苛刻，需要高度优化SQL语句才能达到系统性能设计指标。
面对这样的需求，Hibernate的自动化SQL的方案不再适用。当然，你可以直接使用JDBC进行数据库操作，只是拖沓的数据库访问代码，乏味的字段读取操作令人厌烦。这个时候，你可能想自己封装JDBC。是的，MyBatis就是满足上面这些特定场景的已经封装好的“半自动化”ORM框架。
相对Hibernate和ApacheOJB等“一站式”ORM解决方案而言，MyBatis是一种“半自动化”的ORM实现。这里的“半自动化”是相对于Hibernate等“全自动化”ORM实现而言的。“全自动化”ORM实现了POJO和数据库表之间的映射，以及SQL的自动生成和执行。而MyBatis只解决POJO与SQL之间的映射关系，并不会为程序员在运行期自动生成SQL执行。具体的SQL代码需要程序员编写，然后通过映射配置文件，将SQL所需的参数以及返回的结果字段映射到指定的POJO。