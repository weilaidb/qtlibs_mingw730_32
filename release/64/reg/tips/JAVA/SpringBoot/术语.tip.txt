EJB:Enterprise Java Bean
RMI:Remote Method Invocation,远程方法调用
DI:Dependency Injection,DI，依赖注入
DL:Dependency Loopup
AOP:面向切面编程
IoC:Inversion of Control，控制反转
JMS:Java Messaging Service
CLI:Command Line Interface
COC:Convention Over Configuration,约定优于配置
ORM:对象关系映射
POJO（Plain Old Java Objects，普通的Java对象）
DO(Domain Object)领域对象
Dao:(Data Access Object,Dao)数据访问对象
Eao:(Entry Access Object,Eao)实体访问对象
CRUD:CRUD是指在做计算处理时的增加(Create)、读取查询(Retrieve)、更新(Update)和删除(Delete)几个单词的首字母简写。主要被用在描述软件系统中DataBase或者持久层的基本操作功能。
DSL（Domain Specified Language）领域专用语言
Annotation:注解
MetaData:元数据：描述数据的数据
APT(Annotation processing tool)是一种处理注释的工具,它对源代码文件进行检测找出其中的Annotation，使用Annotation进行额外的处理。


通过RMI，J2EE将EJB组件创建为远程对象。RMI将各种任务与功能的类放到不同的服务器上，然后通过各个服务器间建立的调用规则实现分布式的运算。通过RMI的通信（底层仍然是Socket),连接不同功能模块的服务器，以实现一个完整的功能。

Spring的目的是为了解决企业应用开发的复杂性，它的主要功能是使用基本的Java Bean代替EJB，并提供更多的企业应用功能。
Spring是一个轻量级的控制反转(IoC)和面向切面(AOP)的容器框架。也提供了很多基础功能（事务管理、持久化框架集成等）。Spring的设计原则是“非侵入性”的，我们在实际业务逻辑代码中几乎感觉不到Spring框架的存在。
Spring框架的核心功能概括为:解耦依赖(DI)、系统模块化(AOP)。

Spring容器以Bean的方式来组织和管理Java应用中的各个组件及其组件之间的关系。基于Java Bean的配置管理，特别是对依赖注入(DI)技术的使用，减少了各组件间对业务逻辑具体实现的相互依赖性。
Spring使用BeanFactory来产生和管理Bean,它是工厂模式的实现。BeanFactory使用控制反转模式将应用的配置和依赖性规范与实际的应用程序代码分开。BeanFactory使用依赖注入的方式给组件提供依赖。

Spring框架主要用于与其他技术(例如Struts,Hibernate,MyBatis等）进行整合，将应用程序中的Bean组件实现低耦合关联，提高了系统的可扩展性和维护性。

Spring集成的AOP框架提供了诸如数据库声明式事务等服务。通过使用Spring AOP，我们无须依赖EJB组件，就可以将声明式事务管理集成到应用程序中。AOP的目的是提高系统的模块化程序。

作为一个完整的J2EE框架，Spring生态中给出完整的分布式系统架构的解决方案，Sping Boot+Spring Cloud，这个解决方案中包含了服务发现(Service Discovery)、断路器（Curcuit Breaker)、OAuth2(实现SSO、登陆Toekn的管理）、服务配置(Configuration Server)、消费者驱动契约(Consumer Driven Contracts)、API Gateway等。

当下Spring生态中，Spring Boot、Spring Cloud和Data
 Flow三驾马车带领使用Spring进行应用开发勇往直前。

Spring Boot是伴随着Spring 4.0诞生的，Boot是引导的，因此Spring Boot极大地帮助开发者快速搭建使用Spring框架开发应用程序的过程。例如，Spring Boot可以直接快速启动一个内嵌的Web容器，而无须单独安装和配置Web服务器。


Spring Boot核心特性如下:
.创建一键运行的Spring应用。
.能够使用内嵌的Tomcat、Jetty或Undertow，不需要部署war。
.提供定制化的启动器starters简化第三方依赖配置。
.追求极致的自动配置Spring
.追求一些生产环境的特性，比如特征指标、健康检查和外部配置。
.零代码生成和零XML配置





















#