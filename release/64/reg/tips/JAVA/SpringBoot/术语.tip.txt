EJB:Enterprise Java Bean
RMI:Remote Method Invocation,远程方法调用
DI:Dependency Injection,DI，依赖注入
DL:Dependency Loopup
AOP:面向切面编程
IoC:Inversion of Control，控制反转
JMS:Java Messaging Service，Java 消息服务 JMS（Java Message Service，Java 消息服务）是 JavaEE 应用的标准消息服务，使用
JMS 能大大减少应用程序的耦合，从而提高应用程序的可维护性和可扩展性。

CLI:Command Line Interface
COC:Convention Over Configuration,约定优于配置
ORM:对象关系映射
POJO（Plain Old Java Objects，普通的Java对象）
DO(Domain Object)领域对象
Dao:(Data Access Object,Dao)数据访问对象
Eao:(Entry Access Object,Eao)实体访问对象
CRUD:CRUD是指在做计算处理时的增加(Create)、读取查询(Retrieve)、更新(Update)和删除(Delete)几个单词的首字母简写。主要被用在描述软件系统中DataBase或者持久层的基本操作功能。
DSL（Domain Specified Language）领域专用语言
Annotation:注解
MetaData:元数据：描述数据的数据
APT(Annotation processing tool)是一种处理注释的工具,它对源代码文件进行检测找出其中的Annotation，使用Annotation进行额外的处理。
MVC（Model-View-Controller）
JNDI是 Java 命名与目录接口（Java Naming and Directory Interface）
Velocity:Velocity 是替代 JSP 的另一种表示层的视图解决方案，其最大的特点是以非常
直观的表达式无缝嵌入 HTML 页面，避免了在 JSP 中由于大量标签的滥用而使得页面设
计非常困难。
Hibernate:Hibernate 是目前应用最广泛的开源对象/关系映射（O/R Mapping）框架，其强
大的功能和优秀的性能受到了 Java 开发者的广泛欢迎。Live 在线书店的持久层采用
Hibernate 3.2，配合 JPA 注解，最大程度地简化了数据访问逻辑。
Lucene:Lucene 是一个完全基于 Java 的性能优秀的开源全文搜索引擎，不过考虑到
Lucene 提供的 API 使用比较复杂，采用 Compass 这个封装了 Lucene API 的开源框架即
可轻松实现全文搜索。
Acegi:Acegi 是基于 Spring 开发的一个安全框架，能够实现完善的安全保护，但却能
几乎避免对现有系统的改动。Live 在线书店采用 Acegi 作为安全框架，大大减少了实现
安全逻辑的代码量。

JPA:JPA（Java Persistent API） 在最新的JavaEE 5.0规范中，引入了一个新的Java持久化API——JPA（Java Persistent 
API）。JPA 是 EJB 3.0 的重要规范之一，但却独立于 EJB 3.0。它为 JavaEE 应用定义了
一个标准的持久化申明，使用了 Java 5 的申明。对于 Java 1.4 或更早版本，JPA 也支持
使用传统的 XML 配置文件。

Portlet:Portlet 是一种整合了多个视图的门户页面技术，用户可以自定义页面的布局。
Portlet 不同于 Servlet 之处还在于 Portlet 运行于 Portal 容器中。Spring 2.0 完整地支持
JSR-168 定义的 Portlet 规范，并提供了一个 Portlet MVC 框架。

JRuby、Groovy 和 BeanShell:Spring 2.0 支持 JRuby、Groovy 和 BeanShell 这 3 种动态语言。

EJB:EJB 容器为运行在其中的 EJB 组件提供生命周期管理、事务支持、安全控制等一系列重要的服务。

Spring容器:Spring 容器就是要为普通的 JavaBean 组件提供一系列有价值的服务，它也是整个 Spring
框架的基石。

JavaBean:JavaBean 是一种符合特定规范的 Java 对象，也是最简单、最基本的 Java 组件。
JavaBean具有一个无参数的构造方法和由getter/setter提供的标准属性供外部访问。因此，
JavaBean 既可以作为数据对象的载体，也可以被设计为业务组件实现商业逻辑。和 EJB
组件相比，JavaBean 组件的编写、测试要容易得多，占用的资源也较 EJB 少得多。因此，
相对于 EJB 重量级组件而言，通常把 JavaBean 称为轻量级组件。



BeanFactory： 仅仅提供了最简单的依赖注入支持
ApplicationContext：则扩展了 BeanFactory，提供了更多的额外功能。和基本的 BeanFactory 相比，ApplicationContext 还提供了国际化支持、事件的发布
和通知机制等。

@Required 注解:例如，在 RefBean 的源代码中，写上@Required 注解就要求这个 basic 属性必须被注入。


I18N:Internationalization 中第一个字母 I 和最后一个字母 N 之间有 18 个字母。

















通过RMI，J2EE将EJB组件创建为远程对象。RMI将各种任务与功能的类放到不同的服务器上，然后通过各个服务器间建立的调用规则实现分布式的运算。通过RMI的通信（底层仍然是Socket),连接不同功能模块的服务器，以实现一个完整的功能。

Spring的目的是为了解决企业应用开发的复杂性，它的主要功能是使用基本的Java Bean代替EJB，并提供更多的企业应用功能。
Spring是一个轻量级的控制反转(IoC)和面向切面(AOP)的容器框架。也提供了很多基础功能（事务管理、持久化框架集成等）。Spring的设计原则是“非侵入性”的，我们在实际业务逻辑代码中几乎感觉不到Spring框架的存在。
Spring框架的核心功能概括为:解耦依赖(DI)、系统模块化(AOP)。

Spring容器以Bean的方式来组织和管理Java应用中的各个组件及其组件之间的关系。基于Java Bean的配置管理，特别是对依赖注入(DI)技术的使用，减少了各组件间对业务逻辑具体实现的相互依赖性。
Spring使用BeanFactory来产生和管理Bean,它是工厂模式的实现。BeanFactory使用控制反转模式将应用的配置和依赖性规范与实际的应用程序代码分开。BeanFactory使用依赖注入的方式给组件提供依赖。

Spring框架主要用于与其他技术(例如Struts,Hibernate,MyBatis等）进行整合，将应用程序中的Bean组件实现低耦合关联，提高了系统的可扩展性和维护性。

Spring集成的AOP框架提供了诸如数据库声明式事务等服务。通过使用Spring AOP，我们无须依赖EJB组件，就可以将声明式事务管理集成到应用程序中。AOP的目的是提高系统的模块化程序。

作为一个完整的J2EE框架，Spring生态中给出完整的分布式系统架构的解决方案，Sping Boot+Spring Cloud，这个解决方案中包含了服务发现(Service Discovery)、断路器（Curcuit Breaker)、OAuth2(实现SSO、登陆Toekn的管理）、服务配置(Configuration Server)、消费者驱动契约(Consumer Driven Contracts)、API Gateway等。

当下Spring生态中，Spring Boot、Spring Cloud和Data
 Flow三驾马车带领使用Spring进行应用开发勇往直前。

Spring Boot是伴随着Spring 4.0诞生的，Boot是引导的，因此Spring Boot极大地帮助开发者快速搭建使用Spring框架开发应用程序的过程。例如，Spring Boot可以直接快速启动一个内嵌的Web容器，而无须单独安装和配置Web服务器。


Spring Boot核心特性如下:
.创建一键运行的Spring应用。
.能够使用内嵌的Tomcat、Jetty或Undertow，不需要部署war。
.提供定制化的启动器starters简化第三方依赖配置。
.追求极致的自动配置Spring
.追求一些生产环境的特性，比如特征指标、健康检查和外部配置。
.零代码生成和零XML配置










对象/关系映射 ORM（Object/Relational Mapping）模块封装了多种 ORM 解决方案。
但是，Spring 自身并没有提供任何 ORM 方案，相反，Spring 的 ORM 是为了集成许多流
行的 ORM 框架而设计的，例如，Hibernate、iBatis、TopLink、JDO 等。通过 Spring 提
供的集成方案，可以非常方便地将其纳入到 Spring 的事务管理中。











#
