文件权限
Linux 通过以下两个授权属性来保护其文件系统：
权限
阅读权限（r），该权限允许查看文件内容。
写入权限（w），该权限允许修改文件内容。
执行权限（x），该权限允许运行编程文件或脚本。
a是指所有的用户组，包括root用户组，文件拥有者的用户组，还有其他用户组。
在调用权限的情况下会提供（-）
所有权
所有者是创建文件的超级用户，具有访问与文件关联的任何权限。
用户组是超级用户创建的一或多用户，与超级用户一样具有访问与文件关联的任何权限。
其他用户是排除在超级用户和用户组之外的用户，只具有前两者创建或拥有的任何文件或目录关联的权限。
举个例子
￼
在上图红色框体内的第一列共有十个字符，我们先排除第一个字符（文件类型），往后的九个字符均表示权限。 第2-4个字符（rw-）指定了超级用户的读取和写入权限。 第5-7个字符（r--）指定了用户组的读取权限。 第8-10个字符（r--）指定了其他用户的读取权限，但在这里，读写均被拒绝。
更改权限
使用chmod命令可以更改用不同用户类型的文件权限。添加或删除任何用户类型的任何权限的基本形式：
chmod [class][operator][permission] file_name
chmod [ugoa][+or-][rwx] file_name
class由u（超级用户）,g（用户组）,o（其他用户）,a（所有类型）表示。
operator（+或-）表示添加或删除权限。
permission由指示符r（读取）,w（修改）,x（运行）表示。



内核文件权限值 S_IRUGO=S_IRUSR | S_IRGRP | S_IROTH

Winston_Jory 2016-11-30 14:48:07   4848   收藏 2
分类专栏： other
mode_t 内核文件权限值 S_IRUGO=S_IRUSR | S_IRGRP | S_IROTH 

创建一个 proc 文件 
根据对 proc 文件的不同使用，内核提供了多种包装函数来创建一个 proc 文件。 

方法一： 
struct proc_dir_entry *create_proc_entry(const char *name, mode_t mode, struct proc_dir_entry *parent) 
这是最直接，包装最少的创建方法。 
参数 name 是要创建的 proc 文件名。 mode 是该文件权限值，例如 S_IRUGO ，可传入0表示采用系统默认值。parent 指定该文件的上层 proc 目录项，如果为 NULL，表示创建在 /proc 根目录下。 
create_proc_entry() 完成的任务主要包括：检测 mode 值，分配 proc_dir_entry 结构，注册 proc_dir_entry。

mode_t 是文件权限值。定义在 src/include/stat.h中。
#define S_IFMT 00170000
  13#define S_IFSOCK 0140000
  14#define S_IFLNK 0120000
  15#define S_IFREG 0100000
  16#define S_IFBLK 0060000
  17#define S_IFDIR 0040000
  18#define S_IFCHR 0020000
  19#define S_IFIFO 0010000
  20#define S_ISUID 0004000
  21#define S_ISGID 0002000
  22#define S_ISVTX 0001000
  23
  24#define S_ISLNK(m) (((m) & S_IFMT) == S_IFLNK)
  25#define S_ISREG(m) (((m) & S_IFMT) == S_IFREG)
  26#define S_ISDIR(m) (((m) & S_IFMT) == S_IFDIR)
  27#define S_ISCHR(m) (((m) & S_IFMT) == S_IFCHR)
  28#define S_ISBLK(m) (((m) & S_IFMT) == S_IFBLK)
  29#define S_ISFIFO(m) (((m) & S_IFMT) == S_IFIFO)
  30#define S_ISSOCK(m) (((m) & S_IFMT) == S_IFSOCK)
  31
  32#define S_IRWXU 00700
  33#define S_IRUSR 00400
  34#define S_IWUSR 00200
  35#define S_IXUSR 00100
  36
  37#define S_IRWXG 00070
  38#define S_IRGRP 00040
  39#define S_IWGRP 00020
  40#define S_IXGRP 00010
  41
  42#define S_IRWXO 00007
  43#define S_IROTH 00004
  44#define S_IWOTH 00002
  45#define S_IXOTH 00001
  46
  47#endif
  48
  49#ifdef __KERNEL__
  50#define S_IRWXUGO (S_IRWXU|S_IRWXG|S_IRWXO)
  51#define S_IALLUGO (S_ISUID|S_ISGID|S_ISVTX|S_IRWXUGO)
  52#define S_IRUGO (S_IRUSR|S_IRGRP|S_IROTH)
  53#define S_IWUGO (S_IWUSR|S_IWGRP|S_IWOTH)
  54#define S_IXUGO (S_IXUSR|S_IXGRP|S_IXOTH)
这里的 S_IRUGO=(S_IRUSR|S_IRGRP|S_IROTH)
S_IRUSR：用户读  00400
S_IRGRP：用户组读 00040
S_IROTH: 其他读 00004