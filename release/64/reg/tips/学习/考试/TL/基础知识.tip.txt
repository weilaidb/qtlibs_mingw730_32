==>单选
测试驱动开发的本质是分离关注点和什么？ 
方法运用控制
工具灵活运用
注意力控制
测试先行  x


什么是微核架构？C
单一结构体组成的软件应用，其用户接口和数据访问代码都绑定在同一语言平台的同一应用程序 
提倡将单一应用程序划分成一组小的服务，服务之间的相互协调、配合，为用户提供最终价值
软件的核心框架相对较小，其主要业务功能和逻辑都通过插件实现。

下面说法错误的是：
设计的僵化性是指：很难对系统进行修改，修改一处，导致有依赖的模块连锁修改
设计的牢固性：很难讲能够我不用的部分从系统中抽离，供其他组件重用
为了提高设计的鲁棒性，设计过程中要对未来的需求进行预测，将来可能会用到
代码很难阅读，理解体现了设计的晦涩性   x


下列不属于perl标准/perl扩展正则表达式的是：D
(?|pattern)分支重置
(?0)嵌套引用
(?(condition)yes-patter|no-patter)条件表达式
(?'Open'<)平衡组



关于软件开闭原则说法正确的是：A
对扩展是开放的，对于更改是封闭的
对于扩展是封闭的，对于更改是开放的
对于扩展是开放的，对于更改是开放的
对于扩展是封闭的，对于更改是封闭的


关于里氏替换下面说法正确的是：
子类必须能够替换他们的基类型
基类型必须能够替换他们的子类型
子类型无需替换他们的基类型
子类型和基类型无关


重构离不开测试体系的支撑，关于何时编写测试用例，最好的时机是：D
在需要重构前补充测试用例，作为重构的防护
在完成功能开发后编写测试用例，提升代码的覆盖率，并作为下次重构的防护
在功能编码完成后编写测试用例，以减少代码调试的时间
在功能编码前编写测试用例，以便首先获得良好的接口，同时作为通过验收的准则 

计算模型和语言提供的组合方法要满足以下哪一项？
封闭性
可扩展性
可维护性
可重用性  x

测试驱动开发中经典的三段论given-when-the,given要求？D
驱动我们思考被测接口的方法命名，以及它需要接收的传入参数 x
考虑行为方式，究竟是命令式(verify)还是查询式(assert)方法  x  
创建被测对象
驱动我们分析被测接口的返回值

关于依赖倒置下面说法正确的是：A
高层模块不应该依赖低层模块，二者都应该依赖于抽象
低层模块不应该依赖高层模块，二者都应该依赖于抽象
抽象依赖于细节
低层的修改触发高层模块的修改是正确的


下列描述不正确的是：D
\D 任何非数字
\S 任意非空格
\W 任何非WORD字符
\Z 任意不是输入缓冲区结尾的位置 


关于软件设计粘滞性说法正确的是：B
软件设计粘滞性仅包括软件粘滞性
软件设计粘滞性包括软件粘滞性和环境粘滞性
软件设计粘滞性仅包括环境粘滞性
环境粘滞性不包括编译时间过长


以下哪种设计最能体现分离关注点 B
DRY
AOP
TDA
OAOO


下列哪一项不是Clark-Wilson模型的访问控制关系的一部分？C
客体
接口
编程语言
主体

关于Python比较操作，以下哪个说法是正确的：C
字符串和float进行比较可以得到正确的结果
不同类型的对象比较时，Python内部比较函数会自动验证对象类型
Python内部比较函数不验证是否使用相同类型的对象对两个对象进行比较
字符串和float进行类型转换后也不能进行比较

以下哪个表达式符合python安全编码规范：D
Decimal("11772837182.0800")==11772837182.0800
11772837182.0800>11772837182.0800
eval(usr_print)
Decimal(float("11772837182.0800")==11772837182.0800

下列哪个操作可能会出现回绕：A
+
/
%  x
>>

关于信任边界描述错误的是：A
信任边界内的第三方应用风险较小
信任边界外部的交互风险较大
对信任边界外部永不信任
跨越信任边界需要严格验证

好的设计具有以下哪一项特征？D
应用设计模式
面向函数编程
面向对象编程
抽出出的计算模型的语义与问题领域的核心需求相匹配

例：以下几种电平中，理论传送速率最低的是：B
LVPECL
LVDS
CML

例：以下几种电平，驱动能力最强的是：A
LVPECL
LVDS
CML


单产品业务架构中的技术服务描述正确的是？C
对接用户层，为用户直接带来价值
提供业务能力支撑
业务无关的支持能力封装
提供运行时所需的资源

以下哪项不属于失效安全的设计场景：
电脑蓝屏进入安全模式    x
银行报警后金库门锁死    
商场火灾警报后门都打开
网元主控板运行异常后重启恢复缺省密码


perf标准正则表达式里，[a-z]匹配的是：A
单个小写字母
5个字符[、a、-、z、]的字符串
a、-、z这3个字符中的任意一个
a到z顺序排列的26个字符

计算模型和语言提供的框架的核心在于以下哪一项？D
抽象程度   x
易用性
可组合 
可扩展

TDD的原理是在开发功能代码之前，先编写什么代码？A
单元测试用例
设计仿真
UML
产品实现

测试驱动开发三条规则中的规则1要求除非是为了使一个失败的unit test通过，否则不允许做什么操作？B
编写任何测试代码
编写任何产品代码
输出任何说明文档
设计任何接口代码


在我司提供的DevOps工具链里，制品管理中归一个平台？A
制品库
gerrit
iVersion
EC

在面向对象领域，关注点主要由什么承担？C
过程
函数
对象
以上都不是


阅读以下代码，c(a(),b())的执行后，glob值会是什么？D
int glob;
void c(int i,int j){glob=i+j;}int a(void){return glob+10;}int b(void){glob=42;}void func(void){c(a(),b());}
52   x
94   x
146
不确定的行为   

简单设计中优先级最高的是：D
消除重复
清晰表达意图
最少元素
通过所有测试


perl标准正则表达式里，出现在[]中而肯定不需要转义的字符是：B
^   x
-
+
\


关于文件描述符，正确的是：C
IO操作不会出错，不用关心
已经关闭的文件描述符，也可以进行读、写操作
with open(filename) as fd:with 会自动关闭文件句柄，不用自己关闭
Python会自动处理IO错误，不会造成未知错误


分离关注点的含义是什么？D
将代码分成多个文件
使每个类只有一个方法
将不同功能放在不同模块中
将不同关注点的功能分开处理

为了做到对模块进行扩展时，不要对原来的模块进行修改，关于刺激变化说法错误的是：D
先编写测试
按照特性粒度开发
先开发重要特性
没必要尽早发布软件给用户看


以下设计原则错误的是：D
设计越复杂越容易出错，应减少冗余、提高组件重用度
设计充分考虑用户误操作、滥用等场景
非关键进程不以ROOT权限运行
文件权限不宜设置过小，以便提高操作易用性


以下Python语言的XML解析库中，哪一个安全的：A
defusedxml
etree
DOM
xmlrpc


函数只做一件事的设计依据是SOLID中单一职责设计原则，单一职责原则是从如下哪个概念深化而来的？D
高内聚低耦合
正交四原则
面向对象编程
康威定律


perl标准正则表达式里，\w匹配的是：D
单个字母w
字符\和字符w组成的字符串
任意一个可打印字符
任意一个word字符(字母、数字、下划线)


以下哪一项涉及基于角色的访问控制模型：A
基于角色的访问控制模型允许多个组中的用户成员资格
基于角色的访问控制模型允许单个组中的用户成员资格
基于角色的访问控制模型是非分层的
基于角色的访问控制模型使用标签

阅读以下代码，这段代码安全问题是什么？B
/*在文件a.c中*/extern int *a;int funcarry1(unsigned int i,int x){int tmp=-1;if(i<4){tmp=a[i];a[i]=x;}return tmp;}/*在文件b.c中*/int a[]={1,2,3,4};
下标越界
不兼容的数组声明
没有问题
tmp初始化值不正确


软件设计的过程是将领域问题转化为下列哪一项？B
可模拟的   -- x
可理解的
可计算的
可执行的


以下哪一项更好的描述了限制和约束的进程？C
仅可以再有限的时间下运行的进程 
仅可以在一天中的某些时间运行的进程 
仅可以访问某些内存空间的进程 
控制对客体访问的进程







====================>>>>多选
下列哪些是DevOps工具：ABCD
git
iCenter
TFS,RDCloud
制品库

下列哪些属于代码的外在质量：ABCD
运行速率
平均无故障时间
资源占用情况
界面友好性


安全边界是什么？
ABCD --x
ABC  --x
围绕系统的物理安全区域的边界
把可信计算机和系统其它部分隔离在假想边界
防火墙所在的网络
计算机系统的任何连接 

软件设计目标包含下面哪些？ABCD
实现需求
易于重用
易于理解
减少冗余


例：EMC设计采用的隔离措施主要有：
ABCDE--- x
BCDE  -- x
光电隔离
变压器隔离
电容耦合隔离
电阻隔离
继电器隔离

持续交付的4个核心原则有哪些？ABCD
坚持少做
持续分解问题
坚持快速反馈
持续改进并衡量

下列属于软件设计的SOLID原则的是：ABCDE
单一职责原则
开放-封闭原则
里氏替换原则
依赖倒置原则
接口隔离原则

RUP 4+1视图包括：
ABC   -- x
物理视图
开发视图
逻辑视图
过程视图

选择滤波器时，应重点考虑以下因素：
ABD  -- x
插入损耗
输入、输出端最大限度失配
额定电流及电压
具备共模和差模滤波功能

以下哪些是Python安全编码规范关注的内容：ABCD
len()运算溢出
os.utime()溢出
input()输入合法性校验
eval()的使用

在通过抽象构建计算模型时，以下哪几项是正确的？BCD
考虑实现语言的约束和限制
首先考虑是否能将问题领域映射到一个熟悉的同构领域
站在语义层次思考，尽量不去考虑底层如何实现
提供组合方法

以下unsigned int 可能出现回绕的是？A
unsigned int a = x;unsigned int b = y;//y>0
a+b
a-b
a*b   x
a/b

关于软件测试，下列说法正确的有：
ABD -- x
软件测试就是一系列活动以评价一个程序或系统的特性或能力，并确定是否达到预期的结果
测试就是为了验证软件是否符合用户需求，及验证软件产品是否能正常工作
测试是为了证明程序有错，而不是证明程序无错误
一个好的测试用例是在于它能发现至今未发现的错误
一个成功的测试是发现了至今未发现的错误的测试


单一职责原则的设计目标是只对某一类行为者负责，从而降低函数调用者之间的耦合，减少出错几率，如下关于单一职责原则的说法正确的有：ABC
按照康威定律，如果该函数只有一个调用者，可以认为它是满足单一职责的
函数满足单一职责和满足只干一件事件并不等同：满足了单一职责并不意味着也能满足只干一件事情；同样，满足了只干一件事件也不意味着能满足单一职责
如果函数对多个行为者负责（或者说被多个用户调用），且函数内逻辑未针对这些用户做特殊处理，则说明这多个行为者是一类，因此该函数当前也是满足单一职责的
满足单一职责的函数，其一定短小的，参数一定是少的

统一模型语言(UML)结构建模图包括：BDE
用例图
类图
时序图
部署图
组件图

下列说法有道理的是：ABCD
错误的发现与修正，每推迟一个环节，代价要增大7~10倍
编码活动占据产品研发50%以上的工作量，引入50%以上的错误
代码最严重的坏味道是：“重复”
目前，软件界的核心困难是：适应变化






















==================》》》判断题
软件设计持续应用原则、模式以及实践改进软件结构及可读性。 对

脆弱性指的是一处修改，程序的很多地方出现问题。对

这样的描述是否正确“修改getenv()函数返回的指针指向的内容，可以方便的修改环境变量”  错

拷贝粘贴是一种重用方式   错
测试驱动开发完成后可以收获可执行的以及永远最新的说明文档(Live Document)？ 对

根据安全编码规范，可以用eval执行用户输入的代码片段  错

组合编程要求原子必须是严格正交的，否则组合会推导失败  错

狭义的TDD是ATDD，广义的TDD是UTDD，这一说法正确吗？错

例：I2C信号中的两根信号，其中数据SDA是双向的，时钟SCL是单向的。错

分隔原则基于格子型的访问控制，使用安全易用。错

重复是不同的代码元素对同一知识点进行了多次描述，无论描述方式是否一致。 对

产品版本发布数字签名功能使用了职责分离设计原则。对

“基础架构即代码”是指通过定义文件或配置文件来完整的定义数据中心中所有项目的设计，例如容器、网络设备。对

组合式编程依赖3点：原子、组合手段、抽象手段   对

“在条件表达式中，如果某个条件极其罕见，应考虑单独检查该条件，并在该条件为真时从函数中返回或抛出异常，这样的单独检查通常称为“卫语句(guard clauses)”。这一说法是否正确？ 对

测试代码在设计和编写上不需要考虑代码设计原则和编程规范。错

KlocWork检查出的1、2级告警必须修改  错误

晦涩性指的是很难阅读、理解。没有很好表现出设计意图。对

EOF和feof()可以互相替换使用  错

例：RS-232电平的-5~-15V代表逻辑0，+5~+15代表逻辑1  对

消除重复不影响原有功能重用粒度   对

Python内部比较函数不验证是否使用相同类型的对象对两个对象进行比较    对

组合式编程的目标是为了把组合爆炸的乘法变成加法   对

调用本地命令时，popen,subprocess,os.system的参数不允许来自于用户输入   对

模型是现实的简化，必须保证简化过程不会掩盖任何重要的细节  对

C库函数失败时一定会写errno  错 





































