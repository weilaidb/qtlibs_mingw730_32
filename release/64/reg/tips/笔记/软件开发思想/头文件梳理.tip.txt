笔记模板
☆标题
软件开发思想/头文件梳理


☆内容
1.有些头文件只有定义，不包含其它头文件的#include "other.h"
2.有些头文件包含其它头文件
两者如何界定呢？
*按层次划分，底层、中层、上层，即严格的上中下来组织。

*底层：不包含其它头文件的
 --定义为public,所有模块可共用，外部组件也可以使用
*中层：只包含仅有基本类型定义的头文件
 --定义为protected，所有模块可共用，外部组件不可用
*上层：包含本模块必要的头文件
 --定义为private和protected
 private:本模块使用的
 protected:本模块对外的
 --比如模块名为fun,则
   定义protected中头文件为fun.h,
   定义private中头文件为fun_pri.h


根据这个思想：
将现有的DCN模块的中相关宏定义重新规划，包括
*public:
*protected:
*private:













☆附加信息
在C语言中，头文件的规划通常是根据功能和模块来组织的。以下是一些常见的头文件规划方法：

1. 将相关的函数和数据结构放在同一个头文件中：这样可以将相关的函数和数据结构组织在一起，方便使用和维护。

2. 分离接口和实现：可以将函数的声明放在一个头文件中，而将函数的定义放在一个独立的源文件中。这样可以提供一个清晰的接口，并隐藏实现细节。

3. 层次化组织：可以按照功能和依赖关系将头文件进行层次化组织。较底层的头文件可能包含更基础的定义和声明，而较高层的头文件可能依赖于底层头文件，并提供更高级的功能。

4. 避免循环依赖：确保头文件之间没有循环依赖关系，避免编译错误和复杂性。

当头文件只包含宏或结构体的定义时，通常不需要包含其他头文件的声明。但是，如果这些宏或结构体依赖于其他定义，那么需要包含相关的头文件。

对于包含其他头文件的头文件，可以使用预处理指令  `#include`  来引入所需的头文件。确保在使用某个头文件之前，先引入它所依赖的其他头文件。

总之，头文件的规划应该根据代码的组织结构和依赖关系来设计，以提高代码的可读性、可维护性和可重用性。

☆提交日期
2023-09-13 08:18:41


========================================================================
========================================================================
