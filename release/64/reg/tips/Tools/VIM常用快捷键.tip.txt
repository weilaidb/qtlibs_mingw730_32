VIM常用快捷键
Ctrl+I 前进
Ctrl+O 后退
Ctrl+] 跳转
u 撤回
Ctrl+r  重做
Ctrl+a  数字加
Ctrl+x  数字减
0 180<C-x>  -180(数字减)


ciw  caw  删除一个单词并插入
c3w 删除三个单词并插入
daw 删除一个单词(delete a word)
dw. 2dw d2w 删除两个单词
dl  删除一个字符
dap 删除一个段落
dd  删除一行
2dd 删除两行
db x  删除一个单词并插入
gg=G / =ae /=ie  自动缩进全文
A      行末并插入
a      光标后插入
I      行首并插入
i      光标处插入
o      下一行插入
O      上一行插入
c
cw     删除光标后内容，并插入
ciw    删除光标单词，并插入
s
S      删除整行并插入
yy     复制当前行
yyp    复制一行
p      在下一行粘贴
P      在上一行粘贴
f{char} 查找字符，;下一个   ，上一个
F{char} 反向查找字符，;下一个   ，上一个
v       视图字符模式
V       视图行模式
Ctrl+V  视图块模式
.     重复上一次操作
*     选中符号，并查找

:%s/content/copy/g  全部替换
* cwcopy<Esc>  n  .  确认替换
A;<Esc>  j.  行末添加;号，并依次下一行一样添加

f+  s{char} ;.   依次替换+
db x  反向删除某单词(光标在单词尾)
b     单词开头
b  dw   正向删除单词
daw    删除整个单词(delete a word ?)
d2w 或2dw    删除两个单词
dw.    删除一个单词，再删除一个
3dd  删除光标所在的三行

v$ p 粘贴的内容后，会把选择的内容重新复制，可以用记忆寄存器


:%s//<C-r><C-w>/g   把当前单词插入命令行
<C-r><C-w> 用于插入光标下的单词
<C-r><C-a> 插入光标下的字串



宏，示例
录制:
qa         -- 不是:qa
A;<Esc>
Ivar <Esc>
q

查看内容,^[表示Esc键
:reg a

执行宏
@{register} 执行指定寄存器的内容
@@  重复最近调用过的宏
10@a 执行10次
:'<,'>normal @a 选中的内容执行宏


\v模式开关
\V原义开关
\v过滤正则表达式
\v#{\x{6}|\x{3}} 匹配一组CSS片段中的每一组颜色代码，如匹配以下：
body    {color: #3c3c3c;}
a       {color:#00000EE;}
strong  {color:#000;}

\x代替[0-9a-zA-Z]





常用剪切操作：
剪切选中的文本：可视模式下选中文本后按d。
剪切n行：{n}dd、{n}D、d{n}dn为从当前行往下数需要剪切的行数，当n为1时可省略。
剪切到文件末或首：从当前行剪切到文件首dgg，从当前行剪切到文件尾dG。
剪切到行首或尾：从光标位置（不包括光标当前所在的字符）剪切到行首个字符y^，从光标位置（不包括光标当前所在的字符）剪切到行第一列y0。从光标位置（包括光标当前所在的字符）剪切到行末y$。


数字的格式   set nrformats=
set nrformats-=octal

生成1~100个数字：
使用 put 和 range 快速生成数字
您可以通过以下方式快速生成升序数字

:put=range(1,5)


列模式行首插入空格 :
插入列
举例：插入 “m”

1.光标定位到要操作的地方。
2.Ctrl+v 进入“可视 块”模式，选取这一列操作多少行。
3.Shift+i 输入要插入的内容。（此步: 先按Shift+i，再按m）
4.Esc 按两次，会在每行的选定的区域出现插入的内容。

仅take notes, 参考：http://www.cnblogs.com/xiaowant/articles/1992923.html


列模式选择所有行:
Ctrl+v 
光标在首行开头
G
Shift+i，输入所插入的内容
Esc




1.文件操作
:e init/main.c 打开一个文件
:w 存盘
:saveas <path/to/file>另存为
:saveas test.c保存文件为test.c
:wq 保存并退出
:q! 退出不保存
:bn和:bp  -->同时打开多个文件时，切换
跳转到头文件 g+f，gf

2.
把光标映射成Nop
noremap <Up> <Nop>
noremap <Down> <Nop>
noremap <Left> <Nop>
noremap <Right> <Nop>
3.
.重复操作
2yy 拷贝光标下的两行
.  （小数点）可以重复上一次的命令
N<command> 重复某个命令N次

4.
cw-->光标所在的单词删除
0-->第一个空白字符位置
^-->到本行第一个不是blank字符的位置(所谓blank字符就是空格，tab,换行，回车等）
$-->到本行行尾
g_-->到本行最后一个不是blank字符的位置
fa-->到下一个为a的字符处，
t,-->到逗号前的第一个字符
3fa-->在当前行查找第三个出现的a
F和T-->和f和t一样，只不过是相反方向
/patter-->搜索patter的字符串(如果搜索出多个匹配，可按n到下一下)
P-->粘贴(p/P都可以，p是表示在当前位置之后，P表示在当前位置之前）
yy-->拷贝当前行
u-->撤销
<C-r>-->redo
5.更快的光标移动
:100 或100G 跳转到100行
NG  到第N行（另外:N到第N行，如:137到第137行）
gg  到第一行（开头）
G   到最后一行（结尾）
w   到下一个单词的开头
e   到下一个单词的结尾
b   到上一个单词的开头
%   匹配括号移动，包括(,{,[
#   匹配光标当前所在的单词，移动光标到下一个（或上一个）匹配单词（*是下一个，#是上一个），有点类似source insight那个HightLight word
:noh   取消高亮

6.命令和光标移动的组合 
0y$
0--先到开头
y--从这里开始拷贝
$--拷贝到本行最后一个字符


7.多行操作
C-v Visual Mode
选择多行
I  插入
输入数据
Esc


8.演奏和弦
当你看到诸如<C-p> 这样的键时，它的意思不是“先按 <，然后按 C，再按 -，
等等”。<C-p> 标记等同于 Ctrl-p，意为“同时按 <Ctrl> 及 p”。
我不会无缘无故地选择这种标记方式的。首先，在 Vim 的文档中使用了这种标记
（:h key-notation ），我们也用它定义自定义按键映射项。另外，某些 Vim 命令
由组合键及其他键以一定的次序组合在一起，这种标记也可以很好地表达这些命令。
请看下面这些例子：
标记 含义
<C-n> 同时按 <Ctrl> 和 n
g<C-]> 按 g，然后同时按 <Ctrl> 和 ]
<C-r>0 同时按 <Ctrl> 和 r，然后按 0
<C-w><C-=> 同时按 <Ctrl> 和 w，然后同时按 <Ctrl> 和 =

9.显示特殊按键
有些特殊按键以其名字表示，下表节选了其中的一些：
标记 含义
<Esc> 按退出键
<CR> 按回车键，也写作 <Enter>
<Ctrl> 按控制键
<Tab> 按制表键
<Shift> 按切换键
<S-Tab> 同时按 <Shift> 和 <Tab>
<Up> 按上光标键
<Down> 按下光标键
␣ 按空格键
注意，空格由␣表示。它和 f{char} 命令组合在一起时记为 f␣。



10.技巧 70 用迭代求值的方式给列表编号
如果宏在每次执行时都能插入一个可变的数值，这将会很有用处。在本节中，我
们将学习一种技术，它会在录制宏的时候使某个数字递增，这样一来，就可以在连续
的文本上插入数字 1 到 5。
假设我们要为一些连续的项目进行编号，以下列文本作为演示：
macros/incremental.txt 
partridge in a pear tree 
turtle doves 
French hens 
calling birds 
golden rings 
最终，将把它们转换成这个样子：
1) partridge in a pear tree 
2) turtle doves
3) French hens 
4) calling birds 
5) golden rings 
我们已经学会了几种方法，使得 Vim 能够执行简单的运算，既可以采用带次数的
方式调用 <C-a> 和 <C-x> 命令（参见技巧 10），也可以利用表达式寄存器（参见技
巧 16）。为了完成这次任务，我们将使用表达式寄存器并结合一点 Vim 脚本。
基本的 Vim 脚本
我们先把即将用到的几个命令行脚本过一遍。通过使用 let 关键字，我们可以创建
一个名为 i 的变量，并将其值赋为 0，也可以用 :echo 命令查看变量的当前值：
➾:let i=0 
➾:echo i 
《 0 
以下语句可用于累加 i 的值：
➾:let i += 1 
➾:echo i 
《 1 
如果只是想显示一个变量的值，:echo 命令完全可以胜任，但实际上，我们是想
在文档中插入这个值，因此要使用表达式寄存器。在技巧 16 中，我们已经看到可以用
表达式寄存器进行简单的求和运算，并将结果插入至文档。在这里，我们只需在插入
模式下运行 <C-r>=i<CR>，即可插入变量 i 的值。
录制宏
现在我们归纳一下操作的步骤：
按键操作 缓冲区内容
:let i=1 partridge in a pear tree 
qa partridge in a pear tree 
I<C-r>=i<CR>)<Esc> 1) partridge in a pear tree 
:let i += 1 1) partridge in a pear tree 
q 1) partridge in a pear tree 
在开始录制宏之前，先将变量 i 的初值赋为 1。在宏的录制过程中，利用表
图灵社区会员 徐迁征(1090297017@qq.com) 专享 尊重版权
166 Vim 实用技巧
达式寄存器插入 i 的值，而在停止宏的录制之前，再触发该变量进行累加，现
在应该是 2 了。
执行宏
正如表 11-4 所展示的那样，我们可以在余下的文本行上回放这个宏。
:normal @a 命令将指示 Vim 在高亮选中的每一行上执行这个宏（参见以并行方
式执行宏）。i 的初始值是 2，但它在每次宏执行完后都会递增。最终，每行都以连续
的数字开头了。
表 11-4 —— 在其余的文本行上执行宏
按键操作 缓冲区内容
{start} 1) partridge in a pear tree
turtle doves 
French hens 
calling birds 
golden rings 
jVG 1) partridge in a pear tree
turtle doves 
French hens 
calling birds 
golden rings 
:'<,'>normal @a 1) partridge in a pear tree
2) turtle doves 
3) French hens 
4) calling birds 
5) golden rings 
我们也可以通过复制、粘贴以及 <C-a> 命令完成同样的工作。作为练习，你不
妨自己试一试。

11.
~ 光标所在字符，小写变大写，大写变小写。
vU 光标所在字符，小写变大写
vu 光标所在字符，大写变小写

12.
:reg 查看寄存器

13.复合命令

一箭双雕
我们可以这样说，A 命令把两个动作（$a）合并成了一次按键。不过它不是唯一一个这样的
命令，很多 Vim 的单键命令都可以被看成两个或多个其他命令的组合。下表列出了类似的一些例
子，你能找出它们之间别的共同点吗？
复合命令 等效的长命令
C c$ 
s cl 
图灵社区会员 徐迁征(1090297017@qq.com) 专享 尊重版权
6 Vim 实用技巧
复合命令 等效的长命令
S ^c 
I ^i 
A $a 
o A<CR> 
O ko 
如果你发觉自己正在输入 ko（或更糟糕，在用 k$a<CR>），马上打住！想想你在干什么，然
后你就会意识到可以把它换成 O 命令。
你找出这些命令别的共同点了吗？它们全都会从普通模式切换到插入模式。仔细想想这一点，
并想想这对 . 命令可能产生怎样的影响。







一、移动光标
h,j,k,l 上，下，左，右
ctrl-e 移动页面
ctrl-f 上翻一页
ctrl-b 下翻一页
ctrl-u 上翻半页
ctrl-d 下翻半页
w 跳到下一个字首，按标点或单词分割
W 跳到下一个字首，长跳，如end-of-line被认为是一个字
e 跳到下一个字尾
E 跳到下一个字尾，长跳
b 跳到上一个字
B 跳到上一个字，长跳
0 跳至行首，不管有无缩进，就是跳到第0个字符
^ 跳至行首的第一个字符
$ 跳至行尾
gg 跳至文首
G 调至文尾
5gg/5G 调至第5行
gd 跳至当前光标所在的变量的声明处
fx 在当前行中找x字符，找到了就跳转至
; 重复上一个f命令，而不用重复的输入fx
* 查找光标所在处的单词，向下查找
# 查找光标所在处的单词，向上查找

二、删除复制
dd 删除光标所在行
dw 删除一个字(word)
d/D删除到行末x删除当前字符X删除前一个字符yy复制一行yw复制一个字y/Y 复制到行末
p 粘贴粘贴板的内容到当前行的下面
P 粘贴粘贴板的内容到当前行的上面

三、插入模式
i 从当前光标处进入插入模式
I 进入插入模式，并置光标于行首
a 追加模式，置光标于当前光标之后
A 追加模式，置光标于行末
o 在当前行之下新加一行，并进入插入模式
O 在当前行之上新加一行，并进入插入模式
Esc 退出插入模式

四、编辑
J 将下一行和当前行连接为一行
cc 删除当前行并进入编辑模式
cw 删除当前字，并进入编辑模式
c$ 擦除从当前位置至行末的内容，并进入编辑模式
s 删除当前字符并进入编辑模式
S 删除光标所在行并进入编辑模式
xp 交换当前字符和下一个字符
u 撤销
ctrl+r 重做
~ 切换大小写，当前字符
>> 将当前行右移一个单位
<< 将当前行左移一个单位(一个tab符)
== 自动缩进当前行

五、查找替换
/pattern 向后搜索字符串pattern
?pattern 向前搜索字符串pattern
"\c" 忽略大小写
"\C" 大小写敏感

n 下一个匹配(如果是/搜索，则是向下的下一个，?搜索则是向上的下一个)
N 上一个匹配(同上)
:%s/old/new/g 搜索整个文件，将所有的old替换为new
:%s/old/new/gc 搜索整个文件，将所有的old替换为new，每次都要你确认是否替换

六、退出编辑器
:w 将缓冲区写入文件，即保存修改
:wq 保存修改并退出
:x 保存修改并退出
:q 退出，如果对缓冲区进行过修改，则会提示
:q! 强制退出，放弃修改

七、多文件编辑
vim file1.. 同时打开多个文件
:args 显示当前编辑文件
:next 切换到下个文件
:prev 切换到前个文件
:next！ 不保存当前编辑文件并切换到下个文件
:prev！ 不保存当前编辑文件并切换到上个文件
:wnext 保存当前编辑文件并切换到下个文件
:wprev 保存当前编辑文件并切换到上个文件
:first 定位首文件
:last 定位尾文件
ctrl+^ 快速在最近打开的两个文件间切换
:split[sp] 把当前文件水平分割
:split file 把当前窗口水平分割, file
:vsplit[vsp] file 把当前窗口垂直分割, file
:new file 同split file
:close 关闭当前窗口
:only 只显示当前窗口, 关闭所有其他的窗口
:all 打开所有的窗口
:vertical all 打开所有的窗口, 垂直打开
:qall 对所有窗口执行：q操作
:qall! 对所有窗口执行：q!操作
:wall 对所有窗口执行：w操作
:wqall 对所有窗口执行：wq操作
ctrl-w h 跳转到左边的窗口
ctrl-w j 跳转到下面的窗口
ctrl-w k 跳转到上面的窗口
ctrl-w l 跳转到右边的窗口
ctrl-w t 跳转到最顶上的窗口
ctrl-w b 跳转到最底下的窗口

八、多标签编辑
:tabedit file 在新标签中打开文件file
:tab split file 在新标签中打开文件file
:tabp 切换到前一个标签
:tabn 切换到后一个标签
:tabc 关闭当前标签
:tabo 关闭其他标签
gt 到下一个tab
gT 到上一个tab
0gt 跳到第一个tab
5gt 跳到第五个tab

九、执行shell命令
1、在命令模式下输入":sh"，可以运行相当于在字符模式下，到输入结束想回到VIM编辑器中用exit，ctrl+D返回VIM编辑器
2、可以"!command"，运行结束后自动回到VIM编辑器中
3、用“Ctrl+Z“回到shell，用fg返回编辑
4、:!make -> 直接在当前目录下运行make指令

十、VIM启动项
-o[n] 以水平分屏的方式打开多个文件
-O[n] 以垂直分屏的方式打开多个文件

十一、自动排版
在粘贴了一些代码之后，vim变得比较乱，只要执行gg=G就能搞定

十二、如何在vim中编译程序
在vim中可以完成make,而且可以将编译的结果也显示在vim里，先执行 :copen 命令，将结果输出的窗口打开，然后执行 :make
编译后的结果就显示在了copen打开的小窗口里了，而且用鼠标双击错误信息，就会跳转到发生错误的行。

十三、buffer操作
1、buffer状态
- （非活动的缓冲区）
a （当前被激活缓冲区）
h （隐藏的缓冲区）
% （当前的缓冲区）
# （交换缓冲区）
= （只读缓冲区）
+ （已经更改的缓冲区）

十四、 VIM 操作目录
1.打开目录
vim .
vim a-path/

2.以下操作在操作目录时生效
p,P,t,u,U,x,v,o,r,s

c 使当前打开的目录成为当前目录
d 创建目录
% 创建文件
D 删除文件/目录
- 转到上层目录
gb 转到上一个 bookmarked directory
i 改变目录文件列表方式
^l 刷新当前打开的目录

mf - 标记文件
mu - unmark all marked files
mz - Compress/decompress marked files
gh 显示/不显示隐藏文件( dot-files)
^h 编辑隐藏文件列表
a 转换显示模式, all - hide - unhide
qf diplay infomation about file
qb list the bookmarked directories and directory traversal history
gi Display information on file

mb
mc
md - 将标记的文件(mf标记文件)使用 diff 模式
me - 编辑标记的文件,只显示一个，其余放入 buffer 中
mh
mm - move marked files to marked-file target directory
mc - copy
mp
mr
mt

vim 中复制,移动文件
1, mt - 移动到的目录
2, mf - 标记要移动的文件
3, mc - 移动/复制

R 移动文件

打开当前编辑文件的目录
:Explore
:Hexplore
:Nexplore
:Pexplore
:Sexplore
:Texplore
:Vexplore

分类: Linux(deepin)
