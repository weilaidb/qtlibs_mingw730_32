"================keymap 按键映射
"<Leader>
let mapleader = ","


"普通模式下按 F2 快速打开(或关闭)显示行号。
nnoremap <F2> :set nu! nu?<CR>

" 按F3即可显示或隐藏NerdTree区域了。
map <F3> :NERDTreeMirror<CR>
map <F3> :NERDTreeToggle<CR>
" 按F5重新加载.vimrc
map <F5> :source $MYVIMRC<CR>
"选中文字高亮与取消高亮，前提是安装Plugin 'lfv89/vim-interestingwords'
map <F8> <Leader>k
map <F9> <Leader>K


"设置shift+w切换标签页
map <S-W> gt

map <C-k/> 0i//
"关闭窗口
map <S-Q> :q<CR>
"复制一行
"map <C-D> <ESC>yyp

map <C-L> <ESC>dd

map <C-CR> <ESC>o<CR><ESC>

map <C-k7> <ESC>o<CR><CR><CR><ESC>

map <C-k8> <ESC>O/**<CR>**<CR>**/<ESC>


"上移一行
noremap <C-Up> :call feedkeys( line('.')==1 ? '' : 'ddkP' )<CR>
"下移一行
noremap <C-Down> ddp
"快速跳转window窗口
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l










"===设置Vundle核心插件==="

filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
"安装的插件列表"


"核心插件，用于安装其他所有插件"
Plugin 'VundleVim/Vundle.vim'
"美化状态栏"
Plugin 'powerline/powerline'
"类似IDE的补全插件"
Plugin 'ycm-core/YouCompleteMe'
"添加一个树形目录"
Plugin 'preservim/nerdtree'
"缩进指示线"
Plugin 'Yggdroot/indentLine'
"自动格式化代码"
Plugin 'tell-k/vim-autopep8'
"括号和引号自动补全"
Plugin 'jiangmiao/auto-pairs'
"多行注释"
Plugin 'preservim/nerdcommenter'
"实时语法检查"
Plugin 'vim-syntastic/syntastic'
"美化状态栏"
Plugin 'Lokaltog/vim-powerline'

"===============美化插件
"Plugin 'ryanoasis/vim-devicons'

"高亮单词
Plugin 'lfv89/vim-interestingwords'


call vundle#end()
"开启文件类型自动检测，编写代码时自动换行对齐"
filetype plugin indent on




" ===============================设置NerdTree
"NerdTree文件前有^G字符的解决办法"
let g:NERDTreeNodeDelimiter="\u00a0"
" 设置NerdTree

"autocmd vimenter * NERDTree  "自动开启Nerdtree
"let g:NERDTreeWinSize = 45"设定 NERDTree 视窗大小
"开启/关闭nerdtree快捷键
map <C-f> :NERDTreeToggle<CR>
"let NERDTreeShowBookmarks=1  " 开启Nerdtree时自动显示Bookmarks
"打开vim时如果没有文件自动打开NERDTree
autocmd vimenter * if !argc()|NERDTree|endif
"当NERDTree为剩下的唯一窗口时自动关闭
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
"设置树的显示图标
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'
let NERDTreeIgnore = ['\.pyc$']  " 过滤所有.pyc文件不显示
"let g:NERDTreeShowLineNumbers=1  " 是否显示行号
let g:NERDTreeHidden=0     "不显示隐藏文件
"Making it prettier
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1


" ============================ theme and status line ============================

" theme
set background=dark
colorscheme desert

" set mark column color
hi! link SignColumn   LineNr
hi! link ShowMarksHLl DiffAdd
hi! link ShowMarksHLu DiffChange

" status line
set statusline=%<%f\ %h%m%r%=%k[%{(&fenc==\"\")?&enc:&fenc}%{(&bomb?\",BOM\":\"\")}]\ %-14.(%l,%c%V%)\ %P
set laststatus=2   " Always show the status line - use 2 lines for the status bar





"================默认配置 
"显示行号
set number
"忽略大小写
set ignorecase smartcase

"中文语言支持设置参数：自动识别文件编码，解决中文乱码
set termencoding=utf-8　　
set encoding=utf-8
set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1


set termencoding=utf-8
set ffs=unix,dos,mac
set formatoptions+=m
set formatoptions+=B
"括号自动补全
inoremap ( ()<Esc>i
inoremap [ []<Esc>i
inoremap { {}<Esc>i
inoremap " ""<Esc>i
"逗号的映射
"有了上面括号补全的映射，那在扩好了编辑完后需要跳出括号，应该输入<Esc>, l, a，但我们可以将这个功能映射为，，来实现，首先在编码时连续的两个逗号不会出现（目前我没有遇到），其次，平时输入逗号时，后面都会有一个紧跟的空格。所以对普通的输入不会造成影响。
imap ,, <Esc>la
"按TAB产生4个空格
set ts=4  "(注：ts是tabstop的缩写，设TAB宽4个空格)
set expandtab
"Vim backspace键只能删除到行首，无法跳到上一行继续删除
set backspace=2
" 显示光标位置
set cursorcolumn
set cursorline


" 非高亮度反白
set nohlsearch
" 自动缩排
set autoindent
" 可显示最后一行的状态
set ruler
" 左下角哪一行的状态
set showmode
" 可以在每一行最前面显示行号
set nu
" 背景设置为黑色
set bg=dark
" 进行语法检验，颜色显示
syntax on