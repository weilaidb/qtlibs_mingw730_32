



###########################################################################
#                            DIY Snippets                            #
#                            DIY Snippets                            #
#                            DIY Snippets                            #
###########################################################################


snippet wel "welcome to china" b  
welcome to china
haha!!                  
endsnippet


#=======================================>>>>>>>>>>>



snippet cheader ";c headers" b  
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>
#include <sys/time.h>
#include <sys/fcntl.h>
#include <assert.h>
#include <stdarg.h>
                  
endsnippet


#=======================================>>>>>>>>>>>

snippet cppheader "c++ headers" b  
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <iomanip>
using namespace std;
                  
endsnippet


#=======================================>>>>>>>>>>>



snippet signxh "insert * sign multiline" b  
/**
**
**/                  
endsnippet


#=======================================>>>>>>>>>>>


snippet definemax "define max" b  
#undef MAX
#define MAX(a,b) ((a)>(b)?(a):(b))                  
endsnippet


#=======================================>>>>>>>>>>>

snippet definemin "define min" b  
#undef MIN
#define MIN(a,b) ((a)<(b)?(a):(b))                  
endsnippet


#=======================================>>>>>>>>>>>

snippet defineentertips "define ENTERTIPS" b  
/*文件、 函数 、 行 */
#undef ENTERTIPS
#define ENTERTIPS fprintf(stdout, "%s:%s:%d\n", __FILE__, __FUNCTION__ , __LINE__ );                  
endsnippet


#=======================================>>>>>>>>>>>

snippet definearraysize "define ARRAY_SIZE" b  
#undef ARRAY_SIZE
#define ARRAY_SIZE(arr) ((unsigned)(sizeof(arr) / sizeof((arr)[0])))                  
endsnippet


#=======================================>>>>>>>>>>>

snippet if0 "mark if 0" b  

#if 0
#endif
                  
endsnippet


#=======================================>>>>>>>>>>>


snippet basetype "typedef base type" b  
typedef char CHAR;
typedef unsigned char BYTE;
typedef char INT8;
typedef short INT16;
typedef int INT32;
typedef long long INT64;
typedef unsigned char UINT8;
typedef unsigned short UINT16;
typedef unsigned int UINT32;
typedef unsigned long long UINT64;
typedef unsigned short WORD;
typedef unsigned short WORD16;
typedef unsigned int   WORD32;
typedef unsigned long long WORD64;                  
endsnippet


#=======================================>>>>>>>>>>>

snippet st2 "typedef struct T_xx{}T_xx, *P_xx" b  
typedef struct T_${1:`!p snip.rv = (snip.basename or "name")`}
{
    ${0:/* data */}
    int m_t1;

}T_$1, *P_$1;                  
endsnippet


#=======================================>>>>>>>>>>>


snippet vari "define var int" b  
int ${1:i} = 0;                  
endsnippet


#=======================================>>>>>>>>>>>

snippet varui "define var unsigned int" b  
unsigned int ${1:i} = 0;                  
endsnippet


#=======================================>>>>>>>>>>>

snippet varf "define var float" b  
float ${1:i} = 0.0;                  
endsnippet


#=======================================>>>>>>>>>>>

snippet vard "define var double" b  
double ${1:i} = 0.0;                  
endsnippet


#=======================================>>>>>>>>>>>

snippet varc "define var char" b  
char ${1:i} = 0;                  
endsnippet


#=======================================>>>>>>>>>>>

snippet varpc "define var char pointer" b  
char *${1:i} = NULL;                  
endsnippet


#=======================================>>>>>>>>>>>

snippet varpuc "define var unsigned char pointer" b  
unsigned char *${1:i} = NULL;                  
endsnippet


#=======================================>>>>>>>>>>>


snippet switchcase "condition of switch case" b  

switch ( $1 )
{
case $2:
    break;
default:
    break;
}                  
endsnippet


#=======================================>>>>>>>>>>>


snippet funcv "function return void" b  
void $1() 
{

}                  
endsnippet


#=======================================>>>>>>>>>>>

snippet funci "function return int" b  
int $1() 
{

    return 0;
}                  
endsnippet


#=======================================>>>>>>>>>>>

snippet funcui "function return unsigned int" b  
unsigned int $1() 
{

    return 0;
}                  
endsnippet


#=======================================>>>>>>>>>>>

snippet funchello "function print helloworld!!!" b  
int helloworld() 
{

        printf("hello world!!\n");
    return 0;
}                  
endsnippet


#=======================================>>>>>>>>>>>

snippet funchelloworld "function print helloworld!!!" b  
int helloworld() 
{

    printf("hello world!!\n");
    return 0;
}                  
endsnippet


#=======================================>>>>>>>>>>>


snippet helloworld "print hello world" b  
printf("hello,world!!\n");                  
endsnippet


#=======================================>>>>>>>>>>>

snippet printff "print float" b  
printf("%f\n",$1);                  
endsnippet


#=======================================>>>>>>>>>>>

snippet printfui "print unsigned int" b  
printf("%u\n",$1);                  
endsnippet


#=======================================>>>>>>>>>>>

snippet printfi "print int" b  
printf("%d\n",$1);                  
endsnippet


#=======================================>>>>>>>>>>>

snippet printfint "print int" b  
printf("%d\n",$1);                  
endsnippet


#=======================================>>>>>>>>>>>

snippet printfld "print long" b  
printf("%ld\n",$1);                  
endsnippet


#=======================================>>>>>>>>>>>

snippet printflld "print long long" b  
printf("%lld\n",$1);                  
endsnippet


#=======================================>>>>>>>>>>>

snippet printflu "print unsigned long" b  
printf("%lu\n",$1);                  
endsnippet


#=======================================>>>>>>>>>>>

snippet printfllu "print unsigned long long" b  
printf("%llu\n",$1);                  
endsnippet


#=======================================>>>>>>>>>>>



snippet gtestmain "gtest main" b  
#include "gmock/gmock.h"
int main(int argc, char** argv) {
    testing::InitGoogleMock(&argc, argv);
    return RUN_ALL_TESTS();
}                  
endsnippet


#=======================================>>>>>>>>>>>

snippet gtestheader "gtest header" b  
#include "gmock/gmock.h"
using namespace ::testing;                  
endsnippet


#=======================================>>>>>>>>>>>

snippet gtestclass "gtest class parent is Test" b  
#include "gmock/gmock.h"
using namespace ::testing;


class A${1:RetweetCollection}: public Test {    
public:    
$1 ${2:collection};    
};    
TEST_F(A$1, ${3:IsEmptyWhenCreated}) {    
ASSERT_TRUE(1);    
//   ASSERT_TRUE($2.isEmpty());    
}                  
endsnippet


#=======================================>>>>>>>>>>>


snippet commentheader "comments for header" b  
/***************************************************************************
** 版权所有:  WeiLai Copyright (c) 2020-2030
** 文件名称:  ${1:`!p
if not snip.c:
	import random, string
	snip.rv = snip.fn
else:
	snip.rv = snip.c`}
    
** 当前版本:  v1.0
** 作    者:
** 完成日期: `date +%Y-%m-%d`
** 修改记录:
** 修改日期:
** 版本号  :
** 修改人  :
** 修改内容:
***************************************************************************/
#ifndef ${2:`!p
if not snip.c:
	import random, string
	name = re.sub(r'[^A-Za-z0-9]+','_', snip.basename ).upper()
	rand = ''.join('H')
	snip.rv = ('%s_%s' % (name,rand)).upper()
else:
	snip.rv = snip.c`}
#define $2
/*****************************头文件****************************************/

/*****************************宏定义****************************************/

/*****************************结构体或类型定义*******************************/


/*****************************全局变量****************************************/


/*****************************本地变量****************************************/


/*****************************函数或类声明****************************************/


/*****************************函数或类实现****************************************/








/*****************************by extern "C"****************************************/

#ifdef __cplusplus
extern "C" {
#endif
/*****************************头文件****************************************/


/*****************************宏定义****************************************/


/*****************************结构体或类型定义*******************************/


/*****************************全局变量****************************************/


/*****************************本地变量****************************************/


/*****************************函数或类声明****************************************/


/*****************************函数或类实现****************************************/


#ifdef __cplusplus
}
#endif





#endif /* $2 */
                  
endsnippet


#=======================================>>>>>>>>>>>

snippet commentsource "comments for source" b  
/***************************************************************************
** 版权所有:  WeiLai Copyright (c) 2020-2030  ******************************
** 文件名称:  ${1:`!p
if not snip.c:
	import random, string
	snip.rv = snip.fn
else:
	snip.rv = snip.c`}
** 当前版本:  v1.0
** 作    者:
** 完成日期: `date +%Y-%m-%d`
** 修改记录:
** 修改日期:
** 版本号  :
** 修改人  :
** 修改内容:
***************************************************************************/


/*****************************头文件****************************************/

/*****************************宏定义****************************************/

/*****************************结构体或类型定义*******************************/


/*****************************全局变量****************************************/


/*****************************本地变量****************************************/


/*****************************函数或类声明****************************************/


/*****************************函数或类实现****************************************/








/*****************************by extern "C"****************************************/

#ifdef __cplusplus
extern "C" {
#endif
/*****************************头文件****************************************/


/*****************************宏定义****************************************/


/*****************************结构体或类型定义*******************************/


/*****************************全局变量****************************************/


/*****************************本地变量****************************************/


/*****************************函数或类声明****************************************/


/*****************************函数或类实现****************************************/


#ifdef __cplusplus
}
#endif

                  
endsnippet


#=======================================>>>>>>>>>>>




































































































































































































































































































































































































































































































































































































































































































































































































































































































































###########################################################################
#                            TextMate Snippets                            #
###########################################################################
# --------------
# Functions
# --------------
global !p
def printf_expand_args(snip):
	"""
	This will look how many placeholders printf has and adds the separated commas
	at the end.
	"""
	
	# now add so many "," as much as the amount of placeholders
	amount_placeholders = snip.tabstops[1].current_text.count("%")

	output = ""

	# Add the amount of tabstops
	for placeholder_index in range(3, amount_placeholders + 3):
		output += f", ${placeholder_index}"
	
	# convert them into tabstops
	snip.expand_anon(output)

endglobal

# ==============
# Snippets 
# ==============
priority -50
















snippet def "#define ..."
#define $1
endsnippet

snippet #ifndef "#ifndef ... #define ... #endif"
#ifndef ${1/([A-Za-z0-9_]+).*/$1/}
#define ${1:SYMBOL} ${2:value}
#endif /* ifndef $1 */
endsnippet

snippet #if "#if #endif" b
#if ${1:0}
${VISUAL}$0
#endif
endsnippet

snippet mark "#pragma mark (mark)"
#if 0
${1:#pragma mark -
}#pragma mark $2
#endif

$0
endsnippet

snippet main "main() (main)"
int main(int argc, char *argv[])
{
	${VISUAL}$0
	return 0;
}
endsnippet

snippet for "for loop (for)"
for (${2:i} = 0; $2 < ${1:count}; ${3:++$2}) {
	${VISUAL}$0
}
endsnippet

snippet fori "for int loop (fori)"
for (${4:int} ${2:i} = 0; $2 < ${1:count}; ${3:++$2}) {
	${VISUAL}$0
}
endsnippet

snippet fora "for-loop" b
for (${1:var}; ${2:condition}; `!p
if len(t[1]) > 0:
	snip.rv = t[1].split('=')[0].split()[-1]
`++) {
	
	$0
} /* for ($1; $2; `!p if len(t[1]) > 0: snip.rv = t[1].split('=')[0].split()[-1]`++) */
endsnippet

snippet once "Include header once only guard"
#ifndef ${1:`!p
if not snip.c:
	import random, string
	name = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
	rand = ''.join(random.sample(string.ascii_letters+string.digits, 8))
	snip.rv = ('%s_%s' % (name,rand)).upper()
else:
	snip.rv = snip.c`}
#define $1

${VISUAL}$0

#endif /* end of include guard: $1 */
endsnippet

snippet fprintf "fprintf ..."
fprintf(${1:stderr}, "${2:%s}\n"${2/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$3${2/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet eli "else if .. (eli)"
else if (${1:/* condition */}) {
	${VISUAL}$0
}
endsnippet

post_jump "printf_expand_args(snip)"
snippet "printf" "printf with auto-expand args" wr
printf("$1\n"$2);
endsnippet

snippet st "struct"
struct ${1:`!p snip.rv = (snip.basename or "name") + "_t"`} {
	${0:/* data */}
};
endsnippet

snippet fun "function" b
${1:void} ${2:function_name}($3)
{
	${VISUAL}$0
}
endsnippet

snippet fund "function declaration" b
${1:void} ${2:function_name}($3);
endsnippet

global !p
def split_line(text):
	import textwrap
	lines = textwrap.wrap(text, 78 - 19)
	output = list()
	for line in lines:
		output.append('*' + ' '*19 + line)
	snip_line = snip.tabstops[4].end[0]
	snip.buffer.append(output, snip_line + 1)
	del snip.buffer[snip_line]

def get_args(arglist):
	args = [arg.strip() for arg in arglist.split(',') if arg]
	return args
endglobal

post_jump "if snip.tabstop == 0 : split_line(snip.tabstops[4].current_text)"
snippet head "File Header" b
/******************************************************************************
* File:             `!p snip.rv = fn`
*
* Author:           ${2}  
* Created:          `date +%m/%d/%y` 
* Description:      ${4:${VISUAL}}
*****************************************************************************/
${0}
endsnippet

post_jump "if snip.tabstop == 0 : split_line(snip.tabstops[4].current_text)"
snippet func "Function Header" 
/******************************************************************************
* Function:         $1
* Description:      ${4:${VISUAL}}
* Where:`!p 
snip.rv = ""
snip >> 2

args = get_args(t[2])
if args:
	for arg in args:
		snip.rv += '\n' + '*' + ' '*19 + arg + ' - TODO'
snip << 2
`
* Return:           $5
* Error:            $6
*****************************************************************************/
${1}($2){
	${0}
}
endsnippet
# vim:ft=snippets: