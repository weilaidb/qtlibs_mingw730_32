//模板类的实现也必须在头文件中，不然编译不过。

#ifndef CVECTOREXTPUB_H
#define CVECTOREXTPUB_H

#include <iostream>
#include <string>
#include <vector>
#include <iomanip>
#include "cdefinepub.h"

using namespace std;

template <typename T>
class CVectorExtPub
{
public:
    CVectorExtPub(){};

    vector<T> *newVec();
    WORD32 printVec(vector<T> &vec);
    WORD32 printVecReverse(vector<T> &vec);
    bool isEmpty(vector<T> &vec);
    bool isFull(vector<T> &vec);
    WORD32 info(vector<T> &vec);
    WORD32 size(vector<T> &vec);
    WORD32 capacity(vector<T> &vec);
    WORD32 max_size(vector<T> &vec);
};

template<typename T>
vector<T> *CVectorExtPub<T>::newVec()
{
    return new vector<T>();
}

template<typename T>
WORD32 CVectorExtPub<T>::printVec(vector<T> &vec)
{
    int i = 0;
    for(auto it = vec.begin(); it != vec.end(); it++)
    {
        ++i;
        cout << "No:" << setw(3)  << i << ", "<< *it << endl;
    }
    return vec.size();
}

template<typename T>
WORD32 CVectorExtPub<T>::printVecReverse(vector<T> &vec)
{
    int i = 0;
    for(auto it = vec.rbegin(); it != vec.rend(); it++)
    {
        ++i;
        cout << "No:" << setw(3)  << i << ", "<< *it << endl;
    }
    return vec.size();
}

template<typename T>
bool CVectorExtPub<T>::isEmpty(vector<T> &vec)
{
    return 0 == vec.size();
}

template<typename T>
bool CVectorExtPub<T>::isFull(vector<T> &vec)
{
    return vec.size() > 0;
}

template<typename T>
WORD32 CVectorExtPub<T>::info(vector<T> &vec)
{
    cout << "vec.size():" << vec.size() << endl;
    cout << "vec.capacity():" << vec.capacity() << endl;
    cout << "vec.max_size():" << vec.max_size() << endl;

    return 0;
}

template<typename T>
WORD32 CVectorExtPub<T>::size(vector<T> &vec)
{
    return vec.size();
}

template<typename T>
WORD32 CVectorExtPub<T>::capacity(vector<T> &vec)
{
    return vec.capacity();
}

template<typename T>
WORD32 CVectorExtPub<T>::max_size(vector<T> &vec)
{
    return vec.max_size();
}

#endif // CVECTOREXTPUB_H


















////////////////////////////////测试接口

#include "gmock/gmock.h"
#include "cstringpubtest.h"
#include "cvectorextpub.h"

using namespace testing;

class AnCVectorExtPub: public Test {
public:
    CVectorExtPub<float> actor;
    vector<float> vecempty;
    vector<float> *pvectest;

    void SetUp() override
    {
        float fLp = 10.4;
        pvectest = actor.newVec();
        pvectest->push_back(fLp++);
        pvectest->push_back(fLp++);
        pvectest->push_back(fLp++);
        pvectest->push_back(fLp++);
        pvectest->push_back(fLp++);
    }

    void TearDown() override
    {
        pvectest->clear();
        delete pvectest;
    }
};



TEST_F(AnCVectorExtPub, printVecReturnSize) {
    vector<float> vectest;
    ASSERT_THAT(actor.isEmpty(vecempty), Eq(true));
    ASSERT_THAT(actor.printVec(*pvectest), Eq(5));
    ASSERT_THAT(actor.printVecReverse(*pvectest), Eq(5));
    ASSERT_THAT(actor.isFull(*pvectest), Eq(true));
}



TEST_F(AnCVectorExtPub, SomeInfo) {
    ASSERT_THAT(actor.info(vecempty), Eq(0));
    ASSERT_THAT(actor.info(*pvectest), Eq(0));
    ASSERT_THAT(actor.size(*pvectest), Eq(5));
    ASSERT_THAT(actor.capacity(*pvectest), Ge(5));
    ASSERT_THAT(actor.max_size(*pvectest), Ge(5));
}