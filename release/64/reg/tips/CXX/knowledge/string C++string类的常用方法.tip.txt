C++string类常用方法

Goallegoal

于 2020-10-09 15:34:26 发布

27891
 收藏 957
分类专栏： C/C++ 文章标签： c++
版权

C/C++
专栏收录该内容
45 篇文章9 订阅
订阅专栏
C++string类常用方法
1、string(const char *s) ：将 string 对象初始化为 s 指向的字符串

string str("hello");
1
2、string(size_type n,char c) ：创建一个包含 n 个元素的 string 对象，其中每个元素都被初始化为字符 c

string str(10, 'a');
1
3、string(const string &str) ：将一个 string 对象初始化为 string 对象 str（复制构造函数）

string str("abcde");
string str2(str);
1
2
4、string() ：创建一个默认的 string 对象，长度为 0（默认构造函数）

string str;
1
5、使用C语言风格字符串处理string对象

string str = "hello!";
1
6、获取string对象的长度，C语言中使用strlen()来获取字符串长度，C++中使用str.size()或str.length().

string str("hello!");
int len1 = str.size();
int len2 = str.length();
1
2
3
7、将一个 string 对象赋值给另一个 string 对象

string str("hello!");
string str2;
str2 = str;
1
2
3
8、string 对象的拼接
C 语言中使用 strcat、strncat 函数来进行字符串拼接操作，C++中可以采用以下方式：

string str1("hello");
string str2("world");
string str3 = str1 + str2;
1
2
3
9、使用 += 来在一个 string 对象后面附加一个 string 对象、字符以及 C 风格的字符串

string str("hello");
string str2("world");
str += str2;
str += 'a';
str += "abcd";
1
2
3
4
5
10、string.append() 函数，在string对象后添加一个string对象或c风格字符串。

string str("hello");
string str2("world");
str.append(str2);
str.append("abcd");
1
2
3
4
11、string.push_back() 函数来在一个 string 对象后面附加一个字符

string str("hello");
char ch = 'a';
str.push_back(ch);
1
2
3
12、对于string对象的比较，可以直接使用关系运算符。

string str1("abcd");
string str2("abcd");
if(str1 == str2)
	break;
1
2
3
4
13、string对象的比较也可以使用string.compare() 方法

int compare(const string&str) const;
int compare(size_t pos，size_t len，const string&str)const;
int compare(size_t pos，size_t len，const string&str, size_t subpos，size_t sublen)const;
int compare(const char * s)const;
int compare(size_t pos，size_t len，const char * s)const;
int compare(size_t pos，size_t len，const char * s，size_t n)const;

// example
string str1("hello world");
string str2("hello boy");
str1.compare(6, 3, str2, 6, 3);
1
2
3
4
5
6
7
8
9
10
11
string 类及所有的方法（c++)
application/msword

0星
超过10%的资源
123KB

下载
14、使用 string.substr() 函数来获取子串

string str("hello");
string str2 = str.substr(3,2)
1
2
15、访问 string 字符串的元素

string str("hello");
cout << str[2] << endl;
cout << str.at(2) << endl;
1
2
3
16、使用 string.find() 方法查找字符

//  从字符串的 pos 位置开始（若不指定 pos 的值，则默认从索引 0 处开始），查找子字符串 str。
//  如果找到，则返回该子字符串首次出现时其首字符的索引；否则，返回 string::npos：
//  string 类将 npos 定义为保证大于任何有效下标的值。
size_type find (const string& str, size_type pos = 0) const;
size_type find (const char *s, size_type pos = 0) const;
size_type find (const char *s, size_type pos, size_type n);
size_type find (char ch, size_type pos = 0) const;
1
2
3
4
5
6
7
17、string.rfind() 与 string.find() 方法类似，只是查找顺序不一样， string.rfind() 是从指定位置 pos （默认为字符串末尾）开始向前查找，直到字符串的首部，并返回第一次查找到匹配项时匹配项首字符的索引。换句话说，就是查找子字符串或字符最后一次出现的位置。

18、string.find_first_of() 方法在字符串中从指定位置开始向后（默认为索引 0 处）查找参数中任何一个字符首次出现的位置

string str("hello world");
int pos = str.find_first_of("abcde");
int pos = str.find_first_of("abcde", 1);  // 第二个参数为位置
1
2
3
19、string.find_last_of() 方法在字符串中查找参数中任何一个字符最后一次出现的位置

20、string.find_first_not_of() 方法在字符串中查找第一个不包含在参数中的字符

21、string.find_last_not_of() 方法在字符串中查找最后一个不包含在参数中的字符

22、使用 string.insert() 进行插入操作

深入学习C++ string 2.1
rar

0星
超过10%的资源
310KB

下载
string& insert（size_t pos，const string＆str）;　　　
// 在位置 pos 处插入字符串 str

string& insert（size_t pos，const string＆str，size_t subpos，size_t sublen）;　
// 在位置 pos 处插入字符串 str 的从位置 subpos 处开始的 sublen 个字符

string& insert（size_t pos，const char * s）;　　　　
// 在位置 pos 处插入字符串 s

string& insert（size_t pos，const char * s，size_t n）;　
// 在位置 pos 处插入字符串 s 的前 n 个字符

string& insert（size_t pos，size_t n，char c）;　　　　　 
// 在位置 pos 处插入 n 个字符 c

iterator insert (const_iterator p, size_t n, char c);　
// 在 p 处插入 n 个字符 c，并返回插入后迭代器的位置

iterator insert (const_iterator p, char c);　　　　　　 
// 在 p 处插入字符 c，并返回插入后迭代器的位置
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
23、使用 string.erase() 进行元素删除操作

string& erase (size_t pos = 0, size_t len = npos);　　　// 删除从 pos 处开始的 n 个字符
iterator erase (const_iterator p);　　　　　　　　　　　　// 删除 p 处的一个字符，并返回删除后迭代器的位置
iterator erase (const_iterator first, const_iterator last);　// 删除从 first 到last 之间的字符，并返回删除后迭代器的位置
1
2
3
24、使用 getline() 函数来获取 string 输入

string str;
getline(cin, str);
1
2
25、使用 string.empty() 函数判断字符串是否为空

26、使用 string.swap() 函数交换两个字符串

string str1 = "hello";
string str2 = "HELLO";
str1.swap(str2);
1
2
3
27、string.back()获取或修改字符串最后一个字符

string str("abcd");
char b = str.back();
str.back() = 'e';
1
2
3
28、string.front()获取或修改字符串第一个字符

29、string.pop_back()删除字符串最后一个元素

参考资料：
STRING类使用方法汇总
————————————————
版权声明：本文为CSDN博主「Goallegoal」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/qq_40644809/article/details/108977918