#pragma once用法总结

大山喵

于 2018-08-19 22:29:26 发布

34665
 收藏 195
分类专栏： C/C++ 文章标签： #pragma #ifndef 预编译指令
版权

C/C++
专栏收录该内容
34 篇文章7 订阅
订阅专栏
#pragma指令与#ifndef指令
在C/C++中，在使用预编译指令#include的时候，为了防止重复引用造成二义性，通常有两种方式——

第一种是#ifndef指令防止代码块重复引用，比如说

#ifndef _CODE_BLOCK
#define _CODE_BLOCK
 
// code
 
#endif// _CODE_BLOCK 
第二种就是#pragma once指令，在想要保护的文件开头写入

#pragma once
#ifndef方式是C/C++语言的标准支持，也是比较常用的方式，#ifndef的方式依赖于自定义的宏名（例中的_CODE_BLOCK）不能冲突，它不光可以保证同一份文件不会被包含两次，也能够保证不同文件完全相同的内容不会被包含两次。但，同样的，如果自定义的宏名不小心“重名”了，两份不同的文件使用同一个宏名进行#ifndef，那么会导致编译器找不到声明的情况（被编译器判定为重定义而屏蔽了）。

此外，由于编译器每次都需要打开头文件才能判定是否有重复定义，因此在编译大型项目时，#ifndef会使得编译时间相对较长，因此一些编译器逐渐开始支持#pragma once的方式（Visual Studio 2017新建头文件会自带#pragma once指令）。

#pragma once一般由编译器提供保证：同一个文件不会被包含多次。这里所说的”同一个文件”是指物理上的一个文件，而不是指内容相同的两个文件。无法对一个头文件中的一段代码作#pragma once声明，而只能针对文件。此方式不会出现宏名碰撞引发的奇怪问题，大型项目的编译速度也因此提供了一些。缺点是如果某个头文件有多份拷贝，此方法不能保证它们不被重复包含。在C/C++中，#pragma once是一个非标准但是被广泛支持的方式。

        #pragma once方式产生于#ifndef之后。#ifndef方式受C/C++语言标准的支持，不受编译器的任何限制；而#pragma once方式有些编译器不支持(较老编译器不支持，如GCC 3.4版本之前不支持#pragmaonce)，兼容性不够好。#ifndef可以针对一个文件中的部分代码，而#pragma once只能针对整个文件。相对而言，#ifndef更加灵活，兼容性好，#pragma once操作简单，效率高。

 
————————————————
版权声明：本文为CSDN博主「大山喵」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/CV_Jason/article/details/81842710