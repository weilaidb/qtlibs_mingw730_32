代码重构原则
1.减少代码复杂度
2.增强代码可复用性，提取公共函数
3.抽取静态库/动态库
4.按功能分隔成不同的模块，每个模块只负责一个职责
5.








查出来的
在代码重构中，有一些常用的原则可以指导过程。以下是一些常见的原则（Principles）：

1. 单一职责原则（Single Responsibility Principle，SRP）：每个模块、类或函数应该只负责一个单一的职责。
2. 开闭原则（Open/Closed Principle，OCP）：代码应该对扩展开放，对修改关闭。
3. 里氏替换原则（Liskov Substitution Principle，LSP）：子类型应该能够替代其基类型，而不影响程序的正确性。
4. 接口隔离原则（Interface Segregation Principle，ISP）：客户端不应该被迫依赖它们不使用的接口。
5. 依赖倒置原则（Dependency Inversion Principle，DIP）：高层模块不应该依赖于低层模块，两者都应该依赖于抽象。
6. 不要重复自己原则（Don't Repeat Yourself，DRY）：避免通过将通用功能提取为可重用的组件来重复编写代码。
7. 保持简单和小巧原则（Keep It Simple and Small，KISS）：追求简单，避免不必要的复杂性。
8. 关注点分离原则（Separation of Concerns，SoC）：将不同的关注点或职责分离到不同的模块或类中。

通过遵循这些原则，在代码重构过程中可以提高代码质量、可维护性和灵活性。

