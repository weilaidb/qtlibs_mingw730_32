Makefile call函数说明

不闻窗外事

于 2019-04-02 18:15:22 发布

3330
 收藏 5
分类专栏： Makefile 文章标签： makefile call
版权

Makefile
专栏收录该内容
10 篇文章5 订阅
订阅专栏
“ call”函数是唯一一个可以创建定制化参数函数的引用函数。使用这个函数可以实现对用户自己定义函数引用。我们可以将一个变量定义为一个复杂的表达式，用“ call”函数根据不同的参数对它进行展开来获得不同的结果。

函数语法：$(call variable,param,param,...)
函数功能：在执行时，将它的参数“ param”依次赋值给临时变量“ $(1)”、“ $(2)” call 函数对参数的数目没有限制，也可以没有参数值，没有参数值的“ call”没有任何实际存在的意义。执行时变量“ variable”被展开为在函数上下文有效的临时变量，变量定义中的“ $(1)”作为第一个参数，并将函数参数值中的第一个参数赋值给它；变量中的“ $(2)”一样被赋值为函数的第二个参数值；依此类推（变量$(0)代表变量“ variable”本身）。之后对变量“ variable” 表达式的计算值。
返回值：参数值“ param”依次替换“ $(1)”、“ $(2)”…… 之后变量“ variable”定义的表达式的计算值。
函数说明： 1. 函数中“ variable”是一个变量名，而不是变量引用。因此，通常“ call”函数中的“ variable”中不包含“ $”（当然，除非此变量名是一个计算的变量名）。 2. 当变量“ variable”是一个 make 内嵌的函数名时（如“ if”、“ foreach”、“ strip”等），对“ param”参数的使用需要注意，因为不合适或者不正确的参数将会导致函数的返回值难以预料。 3. 函数中多个“ param”之间使用逗号分割。 4. 变量“ variable”在定义时不能定义为直接展开式！只能定义为递归展开式。
函数示例：
reverse = $(2)$(1)
foo = $(call reverse,a,b)
all:
	@echo "foo=$(foo)"
执行结果：

foo=ba
即a替代了$(1),b替代了$(2)
————————————————
版权声明：本文为CSDN博主「不闻窗外事」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/qu1993/article/details/88976861