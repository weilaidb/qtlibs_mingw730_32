#ifndef CBASEINTERFACE_H$NL#define CBASEINTERFACE_H$NL$NL#include <iostream>$NL$NLusing namespace std;$NL$NLclass CBaseInterface;$NL$NLtypedef int (CBaseInterface::*MsgAction)(int, void *, int);$NL$NLclass CBaseInterface$NL{$NLpublic:$NL    CBaseInterface(){};$NL    virtual ~CBaseInterface(){};$NL$NL};$NL$NL#endif // CBASEINTERFACE_H$NL$NL$NL$NL#ifndef CPROCESSDATA_H$NL#define CPROCESSDATA_H$NL$NL#include <map>$NL#include "cbaseinterface.h"$NL$NL$NLclass CProcessData$NL{$NLprotected:$NL    CProcessData();$NL    ~CProcessData();$NL$NL$NLpublic:$NL    int ProcessData(int iID, void *pData, int iDataLen);  //处理消息$NL    int RegIdFunction(int iID, MsgAction func);           //注册消息处理成员函数$NL$NL$NLpublic:$NL    static CProcessData* GetInstance();$NL$NLprivate:$NL    map<int , MsgAction>m_FucnMap;  //用于存储消息id与处理函数的对应表·$NL    static CProcessData* m_pInstance;$NL};$NL$NL#endif // CPROCESSDATA_H$NL$NL$NL#include "cprocessdata.h"$NL$NLCProcessData* CProcessData::m_pInstance = NULL;$NL$NLCProcessData::CProcessData()$NL{$NL$NL}$NL$NLCProcessData::~CProcessData()$NL{$NL$NL}$NL$NLint CProcessData::RegIdFunction(int iID, MsgAction func)$NL{$NL    m_FucnMap[iID] = func;$NL    return 0;$NL}$NL$NLint CProcessData::ProcessData(int iID, void *pData, int iDataLen)$NL{$NL    map<int, MsgAction>::iterator iter = m_FucnMap.find(iID);$NL    if ( iter != m_FucnMap.end() )$NL    {$NL        ((CBaseInterface*)this->*(iter->second))(iID, pData, iDataLen);$NL    }$NL    else$NL    {$NL        cout<<"in CProcessData::ProcessData, not  find id: "<<iID<<" process func!"<<endl;$NL    }$NL$NL    return 0;$NL}$NL$NLCProcessData* CProcessData::GetInstance()$NL{$NL    if ( m_pInstance == NULL )$NL    {$NL        m_pInstance = new CProcessData;$NL    }$NL$NL    return m_pInstance;$NL}$NL$NL#include <stdio.h>$NL#include <stdlib.h>$NL#include <unistd.h>$NL#include <string.h>$NL#include <sys/types.h>$NL#include <sys/time.h>$NL#include <sys/fcntl.h>$NL#include <assert.h>$NL#include "cprocessdata.h"$NL$NL$NL$NLclass \1: public CBaseInterface$NL{$NLpublic:$NL    virtual ~\1(){};$NL$NL$NL    int Init()$NL    {$NL        CProcessData::GetInstance()->RegIdFunction(1, (MsgAction)&\1::ProcessData1);$NL        CProcessData::GetInstance()->RegIdFunction(2, (MsgAction)&\1::ProcessData2);$NL        return 0;$NL    }$NL$NL$NL    int ProcessData1(int iId, void *pData, int iLen)$NL    {$NL        val = 1;$NL        cout <<" process cmd1, id: "<<iId<<", iLen: "<<iLen<<", val = "<<val++<<endl;$NL        return 0;$NL    }$NL$NL$NL    int ProcessData2(int iId, void *pData, int iLen)$NL    {$NL        cout <<" process cmd1, id: "<<iId<<", iLen: "<<iLen<<", val = "<<val++<<endl;$NL        return 0;$NL    }$NL$NL$NLprivate:$NL    int val;$NL};$NL$NL$NL#if 0$NLint main(int argc, char **argv)$NL{$NL    printf("hello world\n");$NL    \1 test;$NL$NL$NL    test.Init();$NL$NL$NL    CProcessData::GetInstance()->ProcessData(1, NULL, 2);$NL    CProcessData::GetInstance()->ProcessData(2, NULL, 3);$NL$NL    return 0;$NL}$NL$NL#endif$NL$NL