JSP标准标签库编辑$NL根据JSTL标签所提供的功能，可以将其分为5个类别。$NLJSTL 库安装$NLApache Tomcat安装JSTL 库步骤如下：$NL从Apache的标准标签库中下载的二进包(jakarta-taglibs-standard-current.zip)。下载地址：http://archive.apache.org/dist/jakarta/taglibs/standard/binaries/$NL下载jakarta-taglibs-standard-1.1.1.zip 包并解压，将jakarta-taglibs-standard-1.1.1/lib/下的两个jar文件：standard.jar和jstl.jar文件拷贝到/WEB-INF/lib/下。$NL使用任何库，你必须在每个JSP文件中的头部包含<taglib>标签。$NL核心标签$NL核心标签是最常用的JSTL标签。引用核心标签库的语法如下：$NL<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>$NL标签$NL描述$NL<c:out >$NL用于在JSP中显示数据，就像<%= ... >$NL<c:set >$NL用于保存数据$NL<c:remove >$NL用于删除数据$NL<c:catch>$NL用来处理产生错误的异常状况，并且将错误信息储存起来$NL<c:if>$NL与我们在一般程序中用的if一样$NL<c:choose>$NL本身只当做<c:when>和<c:otherwise>的父标签$NL<c:when>$NL<c:choose>的子标签，用来判断条件是否成立$NL<c:otherwise >$NL<c:choose>的子标签，接在<c:when>标签后，当<c:when>标签判断为false时被执行$NL<c:import>$NL检索一个绝对或相对 URL，然后将其内容暴露给页面$NL<c:forEach >$NL基础迭代标签，接受多种集合类型$NL<c:forTokens>$NL根据指定的分隔符来分隔内容并迭代输出$NL<c:param>$NL用来给包含或重定向的页面传递参数$NL<c:redirect >$NL重定向至一个新的URL.$NL<c:url>$NL使用可选的查询参数来创造一个URL$NL$NL格式化标签$NLJSTL格式化标签用来格式化并输出文本、日期、时间、数字。引用格式化标签库的语法如下：$NL<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>$NL标签$NL描述$NL<fmt:formatNumber>$NL使用指定的格式或精度格式化数字$NL<fmt:parseNumber>$NL解析一个代表着数字，货币或百分比的字符串$NL<fmt:formatDate>$NL使用指定的风格或模式格式化日期和时间$NL<fmt:parseDate>$NL解析一个代表着日期或时间的字符串$NL<fmt:bundle>$NL绑定资源$NL<fmt:setLocale>$NL指定地区$NL<fmt:setBundle>$NL绑定资源$NL<fmt:timeZone>$NL指定时区$NL<fmt:setTimeZone>$NL指定时区$NL<fmt:message>$NL显示资源配置文件信息$NL<fmt:requestEncoding>$NL设置request的字符编码$NL$NLSQL标签$NLJSTL SQL标签库提供了与关系型数据库（Oracle，MySQL，SQL Server等等）进行交互的标签。引用SQL标签库的语法如下：$NL<%@ taglib prefix="sql" uri="http://java.sun.com/jsp/jstl/sql" %>$NL标签$NL描述$NL<sql:setDataSource>$NL指定数据源$NL<sql:query>$NL运行SQL查询语句$NL<sql:update>$NL运行SQL更新语句$NL<sql:param>$NL将SQL语句中的参数设为指定值$NL<sql:dateParam>$NL将SQL语句中的日期参数设为指定的java.util.Date 对象值$NL<sql:transaction >$NL在共享数据库连接中提供嵌套的数据库行为元素，将所有语句以一个事务的形式来运行$NL$NLXML 标签$NLJSTL XML标签库提供了创建和操作XML文档的标签。引用XML标签库的语法如下：$NL<%@ taglib prefix="x" uri="http://java.sun.com/jsp/jstl/xml" %>$NL在使用xml标签前，你必须将XML 和 XPath 的相关包拷贝至你的<Tomcat 安装目录>\lib下:$NLXercesImpl.jar:$NLxalan.jar:$NL标签$NL描述$NL<x:out>$NL与<%= ... >,类似，不过只用于XPath表达式$NL<x:parse>$NL解析 XML 数据$NL<x:set >$NL设置XPath表达式$NL<x:if >$NL判断XPath表达式，若为真，则执行本体中的内容，否则跳过本体$NL<x:forEach>$NL迭代XML文档中的节点$NL<x:choose>$NL<x:when>和<x:otherwise>的父标签$NL<x:when >$NL<x:choose>的子标签，用来进行条件判断$NL<x:otherwise >$NL<x:choose>的子标签，当<x:when>判断为false时被执行$NL<x:transform >$NL将XSL转换应用在XML文档中$NL<x:param >$NL与<x:transform>共同使用，用于设置XSL样式表$NL$NLJSTL函数$NLJSTL包含一系列标准函数，大部分是通用的字符串处理函数。引用JSTL函数库的语法如下：$NL<%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" %>$NL函数$NL描述$NLfn:contains()$NL测试输入的字符串是否包含指定的子串$NLfn:containsIgnoreCase()$NL测试输入的字符串是否包含指定的子串，大小写不敏感$NLfn:endsWith()$NL测试输入的字符串是否以指定的后缀结尾$NLfn:escapeXml()$NL跳过可以作为XML标记的字符$NLfn:indexOf()$NL返回指定字符串在输入字符串中出现的位置$NLfn:join()$NL将数组中的元素合成一个字符串然后输出$NLfn:length()$NL返回字符串长度$NLfn:replace()$NL将输入字符串中指定的位置替换为指定的字符串然后返回$NLfn:split()$NL将字符串用指定的分隔符分隔然后组成一个子字符串数组并返回$NLfn:startsWith()$NL测试输入字符串是否以指定的前缀开始$NLfn:substring()$NL返回字符串的子集$NLfn:substringAfter()$NL返回字符串在指定子串之后的子集$NLfn:substringBefore()$NL返回字符串在指定子串之前的子集$NLfn:toLowerCase()$NL将字符串中的字符转为小写$NLfn:toUpperCase()$NL将字符串中的字符转为大写$NLfn:trim()$NL移除首位的空白符$NL