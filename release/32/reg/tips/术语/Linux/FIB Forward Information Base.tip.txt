2.5.5 初步了解路由系统
Linux 内核中采用了 FIB（Forward Information Base）这个名词代替了 Routing Database，原因不详。
可能是不想和应用层的路由数据库发生概念上的冲突吧。但是 Linux 内核还是有一个叫做 RouteTable 的
数据结构的，不过，它只是 FIB 的一份 cache 而已，其关系如同计算机中内存和 CPU cache 的关系。系
统中路由一般采取的手段是：先到路由缓存中查找表项，如果能查找到，那么就直接将对应的一项取出
作为路由的规则；如果查不到，那么就到 FIB 中根据规则换算出来，并且增加一项新的，在路由缓存中
将项目添加进去。所以在研究 Linux 代码时，应该注意这一点，不能抓着 RouteTable 不放而忽视了 FIB。
FIB 是内核中最重要的路由结构。FIB 存放着用来给本地流量和外发报文做内部的路由，也能让内核
外的应用程序通过路由 socket 从内核中获取路由信息。本质上它是一个表，包含上层的地址信息和底层
的设备信息。通过对 FIB 数据的查找和换算，一定能够获得路由一个地址的方法。当报文进入路由系统
时，系统用报文的目标地址和最精确的网络掩码比较，如果不匹配，就转到另一个较精确的掩码入口和
其比较。当完成比较后，IP 层复制到远地主机的“direction”到路由快表中，并沿着这条路径发送数据。
Linux 能被配置成支持多个 FIB/路由表，在这里，FIB 表就是路由表，一个 FIB 表包含多个路由条目，
以下的语境中，你可以把“FIB 表”当作一个数据库的代名词。缺省情况下只配置有 2 个表（即 2 个数
据库）。在大多数情况下，Linux 内核不需要基于策略的路由，特别是嵌入式系统。所以内核不需要配置
多个表。如果这样，有两个预定义的全局指针指向两个表，一个是 local table, 一个是 main table，local
表存放着到本机分配的地址的路由上，比如分配给网络接口设备的地址和环回地址，main 表存放到外部
节点的路由。
由于这个系统相当复杂，我们将这部分的初始化放到下一章去介绍，在此时，只需记住了 FIB 表就
是路由表，Linux 的路由表就是 FIB 表。还有，是 ip_init 函数调用了 ip_rt_init 去初始化路由系统。