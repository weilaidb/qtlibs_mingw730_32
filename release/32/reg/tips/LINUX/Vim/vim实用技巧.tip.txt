vim实用技巧
.  重复上次修改
dw 删除所在单词
vit 选中<a>中文本 (可视模式)
:e – 重新加载当前文档。
:e! – 重新加载当前文档，并丢弃已做的改动。 
set autoread   自动重新加载外部修改内容（ng）

$vim -u NONE -N  不加载vimrc并防止进入兼容模式(nocompatible)
$ vim -u code/essential.vim  加载自定义配置

--with-features=tiny 禁用除最基本的功能外的其他所有功能（Vim 的功能集还包括 small、normal、big 和 huge）
:h +feature-list ，浏览完整的功能列表。
:version 版本
:h gui   gui界面
:h .     重复上次修改(帮助)
>G     增加缩进层级
;  j$. 重复操作末尾添加;
A; j.  重复操作末尾添加;
A     当前结尾写入内容（等同$a）
A  $a
C  c$ 
s  cl
S  ^c
I  ^i 
A  $a 
o  A<CR> 
O  ko 
f+  查找+
s  删除光标下的字符，然后进入插入模式
f{char}  查找下一处指定字符出现的位置
;  命令会重复查找上次  f  命令所查找的字符
,  键会重复反方向查找上次  f  命令所查找的字符
u  撤销
cw 命令会删除从光标位置到单词结尾间的字符，并进入插入模式
*nn  遍历完所有的匹配项，从而跳回到本次查找的起点
db 命令删除从光标起始位置到单词开头的内容，但会原封未动地留下最后一个字符 “h”，再按一下 x 键就可以删除这个捣乱的字符。
b 把光标移到单词的开头
dw  命令删掉整个单词
daw 删除整个单词
:h count  次数
<C-a> 和 <C-x> 命令分别对数字执行加和减操作
:h ctrl-a 数字加
:h ctrl-x 数字减
set nrformats=  把所有数字都当成十进制，不管它们是不是以 0 开头的
:set nrformats=octal,hex
c2w  命令会删除从光标位置到单词结尾间的字符，并进入插入模式 (两次）
d3w  命令删掉整个单词(三次)
:h operator  来查阅完整的列表
d{motion} 命令可以对一个字符（dl）、一个完整单词（daw）或一整个段落（dap）进行操作，它作用的范围由动作命令决定。
c{motion}、y{motion}以及其他一些命令也类似，它们被统称为操作符（operator）。
g~、gu 和 gU 命令要用两次按键来调用
g 当做一个前缀字符，用以改变其后面的按键行为
结识操作符待决模式
:h gU
dap 对段落删除
daw 对单词删除
dl  对字符串删除
gUaw 把当前单词转换成大写形式
>> 缩进当前行
dd 删除当前行
gUU 整体大写字母 来使它作用于当前行
dap 删除整个段落
gUap 把整段文字转换为大写
c  删除当前字符并插入模式
d  删除
y  复制到寄存器
g~  反转大小写
gu  转换为小写
gU  转换为大写
>  增加缩进
<  减小缩进
=  自动缩进
!  使用外部程序过滤{motion}所跨越的行
注释命令以 \\{motion} 触发，它会切换指定行的注释状态。
\\ap 将切换当前段落的注释状态，
\\G 会把从当前行到文件结尾间的所有内容注释掉，
\\\ 则注释当前行。
: h :map-operator
gg=G 整个文件自动注释 （就是说，先用 gg 跳到文件开头，然后用 =G 自动缩进从光标位置到文件结尾的所有内容）
:h omap-info
插件
Kana Natsuno 的 textobj-entire 插件
 commentary 和 textobj-entire 插件
\\ae 会切换整个文件的注释状态 （有插件）
操作符待决模式（Operator-Pending  mode）
<C-h>  删除前一个字符（同退格键）
<C-w>  删除前一个单词
<C-u>  删至行首
<Esc>  切换到普通模式
<C-[>  切换到普通模式
<C-o>  切换到插入-普通模式
:h i_CTRL-[
zz 命令可以重绘屏幕
<C-o>zz  在插入-普通模式中触发这条命令。此操作完成后就会直接回到插入模式，因此我可以不受中断地继续打字。
重新映射大小写转换键（Caps Lock）
K 命令用于查看处于光标之下的那个单词的手册页（参见:h K ）
J 命令则用来把当前行和下一行连接在一起（参见:h J ）。
<C-r>0 把刚才复制的文本粘贴到光标所在位置
f{char}  正向移动到下一个 {char} 所在之处
F{char}  反向移动到上一个 {char} 所在之处
t{char}  正向移动到下一个 {char} 所在之处的前一个字符上
T{char}  反向移动到上一个 {char} 所在之处的后一个字符上
删除（delete）
复制（yank）
粘贴（put）
xp
x 命令把光标下的字符剪切下来，把它放到无名寄存器
p 命令将无名寄存器中的内容粘贴到光标后面
dd 命令剪切当前行，从而将其内容存入无名寄存器中
ddp 调换当前行和它的下一行
yyp 创建文本行的副本
yiw 将光标单词其复制到无名寄存器中
diw 命令不仅删除了单词，而且还将它拷贝到了无名寄存器
:h quote_ ）可以引用黑洞寄存器。因此，"_d{motion}会执行真正的删除操作。
ayiw 把当前单词复制到寄存器 a 中
bdd  把当前整行文本剪切至寄存器 b 中
:delete c，把当前行剪切到寄存器 c
:put c 命令将其粘贴至当前光标所在行之下
复制专用寄存器（"0）
"0P  从复制专用寄存器（"0) 粘贴当前光标
:reg "0
有名寄存器（"a – "z）
"ayiw  拷贝单词到a寄存器
"aP    粘贴a寄存器内容到当前光标
:reg "a
:h quote_ 黑洞寄存器
"_d{motion} 命令，Vim 将删除该文本且不保存任何副本
"+  系统剪贴板（"+）
:h quote+
"*  选择专用寄存器（"*）
"+  X11 剪贴板，用剪切、复制与粘贴命令操作
"*  X11 主剪贴板，用鼠标中键操作
"=  表达式寄存器（"=）
:h quote=
寄存器 内容
"%  当前文件名
"# 轮换文件名
". 上次插入的文本
": 上次执行的 Ex 命令
"/ 上次查找的模式
”/ 寄存器并非只读，可以用 :let 命令（参见 :h quote/  ）对其进行显式的赋值。
p 指定的寄存器内容来替换高亮选区中的文本
ve 高亮单词至单词结尾
gv 重选上一次高亮选区的内容
交换两个词
m{char}  命令负责设置标记
`{char}  命令将跳转到该标记
<C-v>065  插入字符A
A <C-r>=6*35<CR>  简单计算数字并插入 （插入模式）
<C-v>u00bf  插入字符编码为 00bf 的反转问号（“¿”  （插入模式）
ga   字符编码
unicode 表
expandtab 选项

表 3-1 插入非常用字符
按键操作  用途 
<C-v>{123}  以十进制字符编码插入字符
<C-v>u{1234}  以十六进制字符编码插入字符
<C-v>{nondigit}  按原义插入非数字字符
<C-k>{char1}{char2}  插入以二合字母{char1}{char2}表示的字符
r{char} 和 gr{char} 命令允许我们覆盖一个字符，之后马上又回到普通模式（参见 :h r 


表  1-1    可重复的操作及如何回退
目的                          操作              重复  回退 
做出一个修改               {edit}                 .   u 
在行内查找下一指定字符     f{char}/t{char}        ;   , 
在行内查找上一指定字符     F{char}/T{char}        ;   , 
在文档中查找下一处匹配项   /pattern<CR>           n   N 
在文档中查找上一处匹配项   ?pattern<CR>           n   N 
执行替换                   :s/target/replacement  &   u 
执行一系列修改             qx{changes}q           @x  u 








