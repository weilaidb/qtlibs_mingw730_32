命令行参数
命令行参数通过将数据输入传递给代码功能块，使脚本更具动态性，如下示例：
./bash_script.sh parameter1 parameter2...
注：脚本名称与所有传递的参数之间不能存在空格，本处使用空格便于阅读。
如何使用命令行参数
在 Bash 中，命令行参数与以下默认参数或特殊变量的引用一同使用。
$0 ——指定要调用的脚本名称。
$1-9 ——存储前9个自变量的名称，或可用作自变量的位置。
$# ——指定传递给脚本的参数总数。
$* ——将所有命令行参数连接在一起来存储它们。
$@ ——将参数列表存储为数组。
$? ——指定当前脚本的进程 ID 。
$$ ——指定最后一个命令或最近执行过程的推出状态。
$! ——显示最后一个后台作业的 ID 。
传递命令行参数的两种方法：
使用位置编号 使用默认参数（$1-9）来访问命令行参数。
#!/bin/bash
echo $0 '> echo $0'
echo $1 $2 $3 $4 $5 $6 $7 $8 $9'> echo $1 $2 $3 $4 $5 $6 $7 $8 $9'
执行结果：
$ chmod +x bash_script.sh
$ ./bash_script.sh Here is the W3Cschool
./bash_script.sh > echo $0
Here is the W3Cschool >echo $1 $2 $3 $4 $5 $6 $7 $8 $9
使用数组 将参数作为数组传递，按照给定的算法来应用此方法。
声明变量名，将值分配为$@。
variable_name=("$@"
```)
通过指定数组索引来显示参数的值。
${variable_name[i]}
保存脚本，并通过传递参数来执行脚本。
#!/bin/bash
parameter=("$@")
echo ${parameter[0]} ${parameter[1]} ${parameter[2]}
命令替换
在 Bash 中，命令替换允许命令的输出替换命令本身。 命令替换是指Bash执行的扩展，它获取Bash命令的输出，存储在一个变量中并显示回显。 命令替换在脚本和变量分配方面增强了数据的灵活性。
语法：
将命令替换为变量（命令替换的经典形式）是使用反引号，如下示例：
variable_name=`command_name`
variable_name=`command_name [option...] argument1 argument2...`
variable_name=`/path/to/command`
以$开头，将命令放在方括号内进行命令i换，如下示例：
variable_name=$(command_name)
variable_name=$(command_name [option...] argument1 argument2...)
variable_name=$(path/to/command)