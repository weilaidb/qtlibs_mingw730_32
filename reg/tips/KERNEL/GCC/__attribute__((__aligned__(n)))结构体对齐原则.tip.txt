3. __attribute__((__aligned__(n)))对结构体的影响
先定义一个结构体
typedef struct st_tag {
int a;
char b;
} ST1;
ST1 myst；
在没有对齐的情况下：
sizeof（ST1） = sizeof(myst) = 8;
结构体对齐的原则可以总结为：

结构体起始地址（&myst）按最大变量字节数（sizeof（int））对齐；
结构体内每个变量按照自身字节数对齐；
结构体的大小（sizeof(myst)）是最大变量字节数的整数倍（8/4=2）；
typedef struct st_tag {
int a;
char b;
} attribute((aligned(64))) ST1;
ST1 myst；
sizeof（ST1） = sizeof(myst) = 64;

对比：
typedef struct st_tag {
int a;
char b;
} ST1 attribute((aligned(64)));
ST1 myst；
sizeof（ST1） = sizeof(myst) =8 ;
这第二种情况可以理解为__attribute__((aligned(64)))作用于变量ST1 ，只影响对齐，不影响结构的大小。
————————————————
版权声明：本文为CSDN博主「世事依然」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/lzc285115059/article/details/84454497