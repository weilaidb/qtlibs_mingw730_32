in_device{}的结构，in 就是 ip network 的意思

1. struct in_device
2. {
3. struct net_device *dev;
4. atomic_t refcnt;
5. int dead;
维护设备的地址列表，对的，是列表，一个设备可以有多个地址，对于普通 PC 机来说似乎比较少见，但在服务
器上比较常用。我们在后面的章节中会介绍它的
6. struct in_ifaddr *ifa_list; /* IP ifaddr chain */
下面 m 开头这几个成员都是和组播有关系，我删去了好几个
7. struct ip_mc_list *mc_list; /* IP multicast filter chain */
8. struct ip_mc_list *mc_tomb;
9. unsigned long mr_v1_seen;
10. ......
11. 维护 arp 协议互操作的参数
12. struct neigh_parms *arp_parms;
13. struct ipv4_devconf cnf;
14. };



25  struct in_device {
26  	struct net_device	*dev;
27  	refcount_t		refcnt;
28  	int			dead;
29  	struct in_ifaddr	__rcu *ifa_list;/* IP ifaddr chain		*/
30  
31  	struct ip_mc_list __rcu	*mc_list;	/* IP multicast filter chain    */
32  	struct ip_mc_list __rcu	* __rcu *mc_hash;
33  
34  	int			mc_count;	/* Number of installed mcasts	*/
35  	spinlock_t		mc_tomb_lock;
36  	struct ip_mc_list	*mc_tomb;
37  	unsigned long		mr_v1_seen;
38  	unsigned long		mr_v2_seen;
39  	unsigned long		mr_maxdelay;
40  	unsigned long		mr_qi;		/* Query Interval */
41  	unsigned long		mr_qri;		/* Query Response Interval */
42  	unsigned char		mr_qrv;		/* Query Robustness Variable */
43  	unsigned char		mr_gq_running;
44  	unsigned char		mr_ifc_count;
45  	struct timer_list	mr_gq_timer;	/* general query timer */
46  	struct timer_list	mr_ifc_timer;	/* interface change timer */
47  
48  	struct neigh_parms	*arp_parms;
49  	struct ipv4_devconf	cnf;
50  	struct rcu_head		rcu_head;
51  };
52  




图表 2-26net_device 和 in_device、设备特定数据之间的关系
 设备无关层采用 in_device{}数据结构保存 IP 地址和邻居信息——虽然是间接的
 网络抽象层采用 net_device{}数据结构保存设备的名字、编号、地址等共性
 设备特定层的数据则有设备驱动开发人员自己定义，一般有硬件发送、接收缓冲区、芯片寄存
器的信息等等。这片内存区一般是紧跟在 net_device{}后面，由驱动程序在创建 net_device{}的
时候顺带把这块内存也创建了。当然还是用 priv 指针指向，以方便访问。

设备已经被注册了，那么是否就可以工作了呢？不是的，还得靠用户把这些网卡激活，当然，一般
都有脚本在系统初始化的时候干这样的活。网卡被激活的时候，它要完成几个非常重用的事情：
1. 挂接中断处理函数（ISR），如果不能为驱动程序申请到中断，那说明要么网卡没插好，要么和
其他设备发生了冲突，结果就是设备根本不能用。
2. 创建驱动程序内部接收环和发送缓冲区，网卡一般都要“环”的方式来存放报文。
3. 挂接接口状态扫描定时器，以 poll 的方式轮询接口是否真正 up 或 down。
4. 进一步打开设备特点寄存器，使其可以开始收发报文了



用户程序
使能/禁止
ioctl接口
Kernel
notifier_call_chain
(NETDEV_UP)
准备收发数据
 4
notifier_call_chain
(NETDEV_DOWN)
看到这几幅图，读者一定都看到了那几个红色小红旗及方框，其中写明了此时代码要完成的基本任
务。现在可以对驱动程序的初始化做一个基本的概括，即 Linux2.6 下网络驱动程序的初始化分为 4 个基
本步骤： 第1步. 系统把驱动程序装入内存
第2步. PCI 为设备选择正确的驱动程序，并分配相应内存数据结构
第3步. 指定驱动程序如何处理报文格式
第4步. 用户打开设备使其可以真正工作起来





现在运行#strace ifconfig eth0 192.168.18.2 netmask 255.255.255.0，配置好 ip 地址和网络掩码。为什
么要运行 strace？在大部分系统上是没有 ifconfig 的源代码的，那么为了查看 ifconfig 内部完成了什么操
作时，可以用 strace 命令查看。它收集应用程序执行的系统调用，甚至参数都能记录下来。通过对这个
命令的输出进行整理，我们可以把 ifconfig 内部调用的系统接口整理如下：
1. main(int argc, char **argv )
1. {
2. struct sockaddr sa;
3. struct sockaddr_in sin;
4. char host[128];
5. struct aftype *ap;
6. struct hwtype *hw;
7. struct ifreq ifr;
8. char **spp;
9. int fd;
10.
11. fd = socket
12. ifr.ifr_name = “eth0”;
(PF_INET, SOCK_DGRAM, IPPROTO_IP);
13. ap = inet_aftype =
14. {
15. "inet", NULL, /*"DARPA Internet", */ AF_INET, sizeof(unsigned long),
16. INET_print, INET_sprint, INET_input, INET_reserror,
17. NULL /*INET_rprint */ , NULL /*INET_rinput */ ,
18. INET_getnetmask,
19. -1, /* 这个值会被赋成 fd，即刚才打开的 socket */
20. NULL
21. };
Linux2.6 协议栈源代码分析
第 74 页
22. host = “192.168.18.2”;
23. ap->input(0, host, &sa);/* 在此 sasa_family=AF_INET，afsa_data 已经被设置成 
192.168.1.1 */
24. memcpy((char *) &ifr.ifr_addr, (char *) &sa, sizeof(struct sockaddr));
25. ioctl
26.
(fd, SIOCSIFADDR, &ifr);
ioctl
27.
(skfd, SIOCGIFFLAGS, &ifr);
ioctl
28. /* 开始第二次遍历命令行 */
(skfd, SIOCSIFFLAGS, &ifr);
29. host = “255.255.255.0”;
30. ioctl
31.
(skfd, SIOCSIFNETMASK, ifr);
32. }
代码段 3-1配置 ip 地址的用户层代码
以上就是 ifconfig 这个命令实际内部“伪”代码，为了减轻复杂度，我们不必把整个代码列出来。从
上面的代码中可以看出 ifconfig 实际调用了 2 个系统函数：socket 和 ioctl。4 表示为 socket 打开的文件描
述符，姑且认为这是应用程序到达系统内核的一个钥匙吧，后面会介绍一些相关知识。Socket 的参数以
后也会详细介绍。然后是 ioctl 这个系统调用。在 Linux 相关的项目中，ioctl 是用户层与内核或设备驱动
程序进行配置的一个有效手段。在这里我们要配置系统的地址，则必定要通过 ioctl。在 ifconfig 的程序中
依次调用 6 个 ioctl，完成了对系统地址的配置。
下面我们就对出现的系统调用进行分析，首















