C/C++预处理
最常见的预处理是C语言和C++语言。ISO C和ISO C++都规定程序由源代码被翻译分为若干有序的阶段(phase) [1]  [2]  ，通常前几个阶段由预处理器实现。预处理中会展开以#起始的行，试图解释为预处理指令(preprocessing directive) ，其中ISO C/C++要求支持的包括#if/#ifdef/#ifndef/#else/#elif/#endif（条件编译）、#define（宏定义）、#include（源文件包含）、#line（行控制）、#error（错误指令）、#pragma（和实现相关的杂注）以及单独的#（空指令） [1]  [2]  。预处理指令一般被用来使源代码在不同的执行环境中被方便的修改或者编译。
预处理器在UNIX传统中通常缩写为PP，在自动构建脚本中C预处理器被缩写为CPP的宏指代。为了不造成歧义，C++(cee-plus-plus) 经常并不是缩写为CPP，而改成CXX。
注意预处理常被错误地当作预编译(precompiling) ，事实上这是两个不同的概念。预处理尽管并不是ISO C/C++要求的单独阶段，但“预处理”这个术语正式地出现并参与构成其它术语，如C的预处理翻译单元(preprocessing translation unit) [1]  以及C/C++词法规则中预处理记号(prerprocessing-token) 这个语法分类 [1]  [2]  。预编译是一些编译器支持的特性，不是C/C++语言的特性或实现必须要求遵循的规则涉及到的内容，没有在ISO C/C++全文中出现 [1]  [2]  。


C 的角度来看强引用和弱引用
首先 C 源代码变成可执行文件会经历如下几个步骤：

1. 预处理: 进行头文件展开, 宏替换等等;
2. 编译: 通过词法分析和语法分析, 将预处理之后的文件翻译成汇编代码, 内存分配也是在此过程完成的;
3. 汇编: 将汇编代码翻译成目标文件, 目标文件中存放的也就是和源文件等效的机器代码;
4. 链接: 程序中会引入一些外部库, 需要将目标文件中的符号与外部库的符号链接起来, 最终形成一个可执行文件;
