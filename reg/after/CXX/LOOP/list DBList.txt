typedef vector<\2 *> \2List;$NL$NL$NL///////////////////////////////////////////////////////////////////////////////$NL$NLclass \1$NL{$NL$TBpublic:$NL$TB$TB~\1();$NL$TB$TBvoid add(\2 *newdbnode);$NL$TB$TBvoid clear();$NL$TB$TB\2List *getList();$NL$TB$TBBool erase(const unsigned int fid);$NL$TB$TB\2 *find(const unsigned int fid);$NL$TB$TBint getsize();$NL$TB$TB\2 *findIndex(const int tindex);$NL$TB$TBvoid show();$NL$TBprotected:$NL$TB$TB\2List $LO<<<\1>>>;$NL$NL};$NL$NL$NL$NL///////////////////////////////////////////////////////////////////////////////$NL$NL$NL$NLvoid \1::add(\2 *newdbnode) {$LO<<<\1>>>.push_back(newdbnode);}$NL$NLint \1::getsize() {return $LO<<<\1>>>.size();}$NL$NLvoid \1::clear() $NL{$NL$TBif ($LO<<<\1>>>.empty()) $NL$TB$TBreturn;$NL$TB\2List::iterator theIterator;$NL$TBfor (theIterator = $LO<<<\1>>>.begin(); theIterator != $LO<<<\1>>>.end(); theIterator++){$NL$TB$TB\2 *curobject = (\2 *)(*theIterator);$NL$TB$TBdelete curobject;$NL$TB}$NL$TB$LO<<<\1>>>.clear();$NL}$NL$NLBool \1::erase(const unsigned int fid)$NL{$NL$TB\2List::iterator theIterator;$NL$TBfor (theIterator = $LO<<<\1>>>.begin(); theIterator != $LO<<<\1>>>.end(); theIterator++){$NL$TB$TB\2 *curobject = (\2 *)(*theIterator);$NL$TB$TBif (curobject->GetID() == fid){$NL$TB$TB$TBdelete curobject;$NL$TB$TB$TB$LO<<<\1>>>.erase(theIterator);$NL$TB$TB$TBreturn True;$NL$TB$TB}$NL$TB}$NL$TBreturn False;$NL}$NL$NL$NL\2 *\1::findIndex(const int tindex)$NL{$NL$TBint i = 0;$NL$TB\2List::iterator theIterator;$NL$TBfor (theIterator = $LO<<<\1>>>.begin(); theIterator != $LO<<<\1>>>.end(); theIterator++){$NL$TB$TBif (i++ == tindex){$NL$TB$TB$TB\2 *curobject = (\2 *)(*theIterator);$NL$TB$TB$TBreturn curobject;$NL$TB$TB}$NL$TB}$NL$TBreturn NULL;$NL}$NL$NL\2 *\1::find(const unsigned int fid)$NL{$NL$TB\2List::iterator theIterator;$NL$TBfor (theIterator = $LO<<<\1>>>.begin(); theIterator != $LO<<<\1>>>.end(); theIterator++){$NL$TB$TB\2 *curobject = (\2 *)(*theIterator);$NL$TB$TBif (curobject->GetID() == fid)$NL$TB$TB$TBreturn curobject;$NL$TB}$TB$TB$NL$TBreturn NULL;$NL}$NL$NL$NL\1::~\1() {clear();}$NL$NL\2List *\1::getList() {return &$LO<<<\1>>>;}