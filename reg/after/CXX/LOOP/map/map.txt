#include <map>$NL#include <iostream>$NLusing namespace std;$NLtypedef \1<\2> \3;$NL\3 \4;$NL$NL$NL//insert函数插入pair数据$NL\1<\2> \4;$NL\4.insert(pair<\2>(1,"Jim"));$NL$NL//insert函数插入value_type数据$NL\4.insert(\1<\2>::value_type (2, "Tom"));$NL$NL//用数组方式插入数据$NL\4[3]="Jerry";$NL$NL//Map数据的遍历$NL//1)前向迭代器$NL$NL\1<\2>::iterator it;$NL\1<\2>::iterator itEnd;$NLit = \4.begin();$NLitEnd = \4.end();$NLwhile (it != itEnd) {$NL	cout<<it->first<<' '<<it->second<<endl;  $NL	it++;$NL}$NL$NL//2)反向迭代器$NL\1<\2>::reverse_iterator riter;  $NLfor(riter = \4.rbegin(); riter != \4.rend(); riter++)$NL{$NL	cout<<riter->first<<"  "<<riter->second<<endl;$NL}	$NL$NL//3)数组形式$NL\4.insert(\1<\2>::value_type (1, "Tom"));$NL\4[2]= "Jim";$NL\4[3]= "Jerry";$NL$NLint nSize = \4.size();$NLfor(int n=0; n< nSize; n++)$NL{$NL	cout << "No:" << n+1  << ", " << \4[n]<<endl;$NL}$NL$NL//map中元素的查找：$NL\1<\2>::iterator f_it;; $NLf_it = \4.find(112);$NLif(f_it == \4.end())$NL{$NL	cout<<"we do not find 112"<<endl;$NL}$NLelse $NL{$NL	cout<<"wo find 112"<<endl;$NL}$NL$NL//map中元素的删除：$NL//iterator erase(iterator it)	;//通过一个条目对象删除$NL//iterator erase(iterator first，iterator last);	//删除一个范围$NL//size_type erase(const Key&key);	//通过关键字删除$NL\4.clear();//就相当于enumMap.erase(enumMap.begin(),enumMap.end());$NL$NL$NL//map中 swap的用法：$NL//Map中的swap不是一个容器中的元素交换，而是两个容器交换;$NL//见C++ Map用法$NL$NL//map的sort问题：$NL//Map中的元素是自动按key升序排序,所以不能对map用sort函数：$NL//见C++ Map用法$NL$NL